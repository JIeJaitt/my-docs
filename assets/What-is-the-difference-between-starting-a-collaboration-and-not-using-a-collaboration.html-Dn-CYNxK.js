import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as t,o}from"./app-XeMNkQ71.js";const i={};function l(r,e){return o(),n("div",null,e[0]||(e[0]=[t("p",null,"协程是一种在用户空间实现的多任务机制，它可以在一个线程中切换多个子程序的执行，从而提高了程序的并发性和执行效率。",-1),t("h2",{id:"使用协程和不用协程的区别主要有以下几点",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#使用协程和不用协程的区别主要有以下几点"},[t("span",null,"使用协程和不用协程的区别主要有以下几点：")])],-1),t("ul",null,[t("li",null,"协程可以避免线程切换的开销，因为协程的切换是由程序自身控制的，而不是由操作系统调度的。"),t("li",null,"协程不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了。"),t("li",null,"协程更轻量级，一个线程可以创建和运行多个协程，而每个线程都需要占用一定的内存和资源。")],-1),t("p",null,"所以，协程相比线程，有更高的执行效率和更低的资源消耗。",-1),t("h2",{id:"协程和进程的区别主要有以下几点",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#协程和进程的区别主要有以下几点"},[t("span",null,"协程和进程的区别主要有以下几点：")])],-1)]))}const p=a(i,[["render",l],["__file","What-is-the-difference-between-starting-a-collaboration-and-not-using-a-collaboration.html.vue"]]),d=JSON.parse('{"path":"/posts/go/What-is-the-difference-between-starting-a-collaboration-and-not-using-a-collaboration.html","title":"开启一个协程和不用协程有啥区别?","lang":"zh-CN","frontmatter":{"title":"开启一个协程和不用协程有啥区别?","icon":"edit","date":"2022-06-19T15:16:14.000Z","category":["Go 语言"],"tag":["golang"],"description":"协程是一种在用户空间实现的多任务机制，它可以在一个线程中切换多个子程序的执行，从而提高了程序的并发性和执行效率。 使用协程和不用协程的区别主要有以下几点： 协程可以避免线程切换的开销，因为协程的切换是由程序自身控制的，而不是由操作系统调度的。 协程不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态...","head":[["meta",{"property":"og:url","content":"https://jiejaitt.tech/posts/go/What-is-the-difference-between-starting-a-collaboration-and-not-using-a-collaboration.html"}],["meta",{"property":"og:title","content":"开启一个协程和不用协程有啥区别?"}],["meta",{"property":"og:description","content":"协程是一种在用户空间实现的多任务机制，它可以在一个线程中切换多个子程序的执行，从而提高了程序的并发性和执行效率。 使用协程和不用协程的区别主要有以下几点： 协程可以避免线程切换的开销，因为协程的切换是由程序自身控制的，而不是由操作系统调度的。 协程不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-15T14:03:24.000Z"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:published_time","content":"2022-06-19T15:16:14.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-15T14:03:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开启一个协程和不用协程有啥区别?\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-19T15:16:14.000Z\\",\\"dateModified\\":\\"2023-06-15T14:03:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JIeJaitt\\",\\"url\\":\\"https://jiejaitt.tech\\"}]}"]]},"headers":[{"level":2,"title":"使用协程和不用协程的区别主要有以下几点：","slug":"使用协程和不用协程的区别主要有以下几点","link":"#使用协程和不用协程的区别主要有以下几点","children":[]},{"level":2,"title":"协程和进程的区别主要有以下几点：","slug":"协程和进程的区别主要有以下几点","link":"#协程和进程的区别主要有以下几点","children":[]}],"git":{"createdTime":1686837804000,"updatedTime":1686837804000,"contributors":[{"name":"JIeJaitt","email":"498938874@qq.com","commits":1}]},"readingTime":{"minutes":0.92,"words":275},"filePathRelative":"posts/go/What-is-the-difference-between-starting-a-collaboration-and-not-using-a-collaboration.md","localizedDate":"2022年6月19日","excerpt":"<p>协程是一种在用户空间实现的多任务机制，它可以在一个线程中切换多个子程序的执行，从而提高了程序的并发性和执行效率。</p>\\n<h2>使用协程和不用协程的区别主要有以下几点：</h2>\\n<ul>\\n<li>协程可以避免线程切换的开销，因为协程的切换是由程序自身控制的，而不是由操作系统调度的。</li>\\n<li>协程不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了。</li>\\n<li>协程更轻量级，一个线程可以创建和运行多个协程，而每个线程都需要占用一定的内存和资源。</li>\\n</ul>\\n<p>所以，协程相比线程，有更高的执行效率和更低的资源消耗。</p>","autoDesc":true}');export{p as comp,d as data};
