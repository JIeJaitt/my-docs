import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-320a15a4.js";const p={},o=t(`<h2 id="如何使用gorilla-mux-的-handler方法" tabindex="-1"><a class="header-anchor" href="#如何使用gorilla-mux-的-handler方法" aria-hidden="true">#</a> 如何使用gorilla/mux 的 Handler方法</h2><p>func (r *Router) Handler(method, path string, handler http.Handler) 是 Router 结构体的一个方法，用于将一个 http.Handler 添加到路由中。</p><p>具体来说，它接受三个参数：</p><ul><li>method 是一个字符串，表示 HTTP 方法，比如 &quot;GET&quot;、&quot;POST&quot;、&quot;PUT&quot; 等等。如果要匹配所有方法，可以使用 &quot;*&quot;。</li><li>path 是一个字符串，表示要匹配的 URL 路径。可以包含参数，比如 &quot;/users/:id&quot;。</li><li>handler 是一个 http.Handler，表示要执行的处理器函数。</li></ul><p>当请求到达路由器时，路由器将会匹配请求的方法和路径，如果匹配成功，就会执行相应的处理器函数。如果请求的方法或路径不匹配，路由器将会尝试下一个路由规则。</p><p>下面是一个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;net/http&quot;</span>

    <span class="token string">&quot;github.com/gorilla/mux&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    r<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/{name}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vars <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">Vars</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        name <span class="token operator">:=</span> vars<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span>
        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello, %s!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span>

    r<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个新的 mux.Router 实例，并使用 HandleFunc 和 Handler 方法分别添加了两个路由规则。第一个路由规则使用 HandleFunc 方法添加，它将会匹配所有的 GET 请求，路径为 &quot;/hello/{name}&quot;，并执行一个处理器函数，该函数会从请求 URL 中获取名字参数，并将字符串 &quot;Hello, {name}!&quot; 写入响应体中。</p><p>第二个路由规则使用 Handler 方法添加，它将会匹配所有的 POST 请求，路径为 &quot;/hello&quot;，并执行一个匿名函数，该函数将字符串 &quot;Hello, World!&quot; 写入响应体中。</p><h2 id="如何使用httprouter包的-handler-方法" tabindex="-1"><a class="header-anchor" href="#如何使用httprouter包的-handler-方法" aria-hidden="true">#</a> 如何使用httprouter包的 Handler 方法</h2><p>httprouter 包中也有一个 Handler 方法，用于将一个 http.Handler 添加到路由中，其函数签名与 gorilla/mux 中的 Handler 方法一致。</p><p>具体来说，它接受三个参数：</p><ul><li>method 是一个字符串，表示 HTTP 方法，比如 &quot;GET&quot;、&quot;POST&quot;、&quot;PUT&quot; 等等。如果要匹配所有方法，可以使用 &quot;*&quot;。</li><li>path 是一个字符串，表示要匹配的 URL 路径。可以包含参数，比如 &quot;/users/:id&quot;。</li><li>handler 是一个 http.Handler，表示要执行的处理器函数。</li></ul><p>当请求到达路由器时，路由器将会匹配请求的方法和路径，如果匹配成功，就会执行相应的处理器函数。如果请求的方法或路径不匹配，路由器将会尝试下一个路由规则。</p><p>下面是一个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;net/http&quot;</span>

    <span class="token string">&quot;github.com/julienschmidt/httprouter&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/:name&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> ps httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">:=</span> ps<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello, %s!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    r<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个新的 httprouter.Router 实例，并使用 GET 和 Handler 方法分别添加了两个路由规则。第一个路由规则使用 GET 方法添加，它将会匹配所有的 GET 请求，路径为 &quot;/hello/{name}&quot;，并执行一个处理器函数，该函数会从请求 URL 中获取名字参数，并将字符串 &quot;Hello, {name}!&quot; 写入响应体中。</p><p>第二个路由规则使用 Handler 方法添加，它将会匹配所有的 POST 请求，路径为 &quot;/hello&quot;，并执行一个匿名函数，该函数将字符串 &quot;Hello, World!&quot; 写入响应体中。</p><p>注意，httprouter 中的路由规则匹配顺序是按照添加的顺序进行的，因此更具体的规则需要放在前面，否则可能会被更通用的规则所覆盖。</p><h2 id="r-httprouter-new-之后为什么就能使用-r-get函数和r-handler函数了" tabindex="-1"><a class="header-anchor" href="#r-httprouter-new-之后为什么就能使用-r-get函数和r-handler函数了" aria-hidden="true">#</a> r := httprouter.New()之后为什么就能使用 r.GET函数和r.Handler函数了？</h2><p>在 httprouter 包中，New 函数返回了一个 httprouter.Router 类型的实例，该实例具有多个方法，包括 GET 和 Handler 方法。</p><p>这是因为 httprouter.Router 类型实现了 http.Handler 接口，因此可以将其作为参数传递给 http.ListenAndServe 函数，从而处理传入的 HTTP 请求。</p><p>在 httprouter 中，路由器的处理方式与标准库中的 http.ServeMux 类似，都是将路由规则映射到处理器函数。但是，httprouter 采用了一些性能优化措施，例如使用 Trie 树来快速匹配路由规则，以提高路由匹配的速度和效率。</p><p>因此，当你调用 r.GET 或 r.Handler 函数时，实际上是将一个路由规则添加到 httprouter.Router 实例中。当请求到达路由器时，路由器将会根据路由规则匹配请求的方法和路径，并调用相应的处理器函数来处理请求。</p>`,24),e=[o];function u(c,l){return s(),a("div",null,e)}const d=n(p,[["render",u],["__file","4.html.vue"]]);export{d as default};
