import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as p,c as o,a as n,b as s,d as e,e as t}from"./app-CgdPMHM7.js";const c={},u=n("p",null,"You:",-1),r={href:"https://github.com/ObscurusGrassator/openWakeWord-cpp",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m=n("br",null,null,-1),k=n("br",null,null,-1),v=n("br",null,null,-1),b=n("br",null,null,-1),h=n("br",null,null,-1),g=n("br",null,null,-1),_=n("br",null,null,-1),f=n("br",null,null,-1),x=n("br",null,null,-1),N=n("p",null,"ChatGPT:",-1),y={href:"https://github.com/ObscurusGrassator/openWakeWord-cpp",target:"_blank",rel:"noopener noreferrer"},O=n("br",null,null,-1),I=n("br",null,null,-1),R=n("br",null,null,-1),w=n("br",null,null,-1),X=n("br",null,null,-1),D=n("br",null,null,-1),C=n("br",null,null,-1),A=n("br",null,null,-1),j=n("br",null,null,-1),$=n("br",null,null,-1),W=t("<p>You:</p><ul><li>你的问题是由于编译器找不到<code>onnxruntime_cxx_api.h</code>头文件。这个文件是ONNX Runtime的C++ API头文件，应该位于你指定的<code>lib/arm64/include</code>目录下。请按照以下步骤检查和解决这个问题：</li></ul><ol><li><strong>检查文件路径</strong> :<br> 确认<code>lib/arm64/include</code>目录下是否存在<code>onnxruntime_cxx_api.h</code>文件。如果没有，你可能需要从ONNX Runtime的官方发布中获取并放置到正确的目录下。</li><li><strong>下载ONNX Runtime</strong> :<br> 如果你没有安装ONNX Runtime，可以通过以下步骤下载和安装:</li></ol>",3),M={href:"https://github.com/microsoft/onnxruntime",target:"_blank",rel:"noopener noreferrer"},G=n("li",null,"下载适合你平台的预编译库，或者自行编译。",-1),S=t(`<ol start="3"><li><strong>设置正确的路径</strong> :<br> 确认你的路径设置是正确的。如果你已经有了ONNX Runtime的头文件和库文件，请确认这些文件在正确的路径中。例如：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> lib/arm64/include
<span class="token function">cp</span> /path/to/onnxruntime_cxx_api.h lib/arm64/include/
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> lib/arm64/lib
<span class="token function">cp</span> /path/to/libonnxruntime.dylib lib/arm64/lib/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>更新Makefile</strong> :<br> 确认你的Makefile中的路径和库文件是正确的。你的Makefile可能需要一些修改来适应你的环境：</li></ol><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CXX <span class="token operator">=</span> g++
CXXFLAGS <span class="token operator">=</span> -Ilib/arm64/<span class="token keyword">include</span> -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra
LDFLAGS <span class="token operator">=</span> -Llib/arm64/lib -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span>
LIBS <span class="token operator">=</span> -lpthread -lonnxruntime

TARGET <span class="token operator">=</span> build/openwakeword
SOURCES <span class="token operator">=</span> src/main.cpp

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span>
    mkdir -p build
    <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>重新编译</strong> :<br> 完成上述步骤后，重新运行<code>make</code>命令进行编译。</li></ol><p>希望这些步骤能帮你解决问题。如果问题依然存在，请检查是否有任何额外的错误信息，并确保所有依赖库和头文件路径正确设置。</p><p>4o</p><p>ChatGPT:</p><ul><li>你的问题是由于编译器找不到<code>onnxruntime_cxx_api.h</code>头文件。这个文件是ONNX Runtime的C++ API头文件，应该位于你指定的<code>lib/arm64/include</code>目录下。请按照以下步骤检查和解决这个问题：</li></ul><ol><li><strong>检查文件路径</strong> :<br> 确认<code>lib/arm64/include</code>目录下是否存在<code>onnxruntime_cxx_api.h</code>文件。如果没有，你可能需要从ONNX Runtime的官方发布中获取并放置到正确的目录下。</li><li><strong>下载ONNX Runtime</strong> :<br> 如果你没有安装ONNX Runtime，可以通过以下步骤下载和安装:</li></ol>`,10),L={href:"https://github.com/microsoft/onnxruntime",target:"_blank",rel:"noopener noreferrer"},T=n("li",null,"下载适合你平台的预编译库，或者自行编译。",-1),E=t(`<ol start="3"><li><strong>设置正确的路径</strong> :<br> 确认你的路径设置是正确的。如果你已经有了ONNX Runtime的头文件和库文件，请确认这些文件在正确的路径中。例如：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> lib/arm64/include
<span class="token function">cp</span> /path/to/onnxruntime_cxx_api.h lib/arm64/include/
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> lib/arm64/lib
<span class="token function">cp</span> /path/to/libonnxruntime.dylib lib/arm64/lib/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>更新Makefile</strong> :<br> 确认你的Makefile中的路径和库文件是正确的。你的Makefile可能需要一些修改来适应你的环境：</li></ol><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CXX <span class="token operator">=</span> g++
CXXFLAGS <span class="token operator">=</span> -Ilib/arm64/<span class="token keyword">include</span> -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra
LDFLAGS <span class="token operator">=</span> -Llib/arm64/lib -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span>
LIBS <span class="token operator">=</span> -lpthread -lonnxruntime

TARGET <span class="token operator">=</span> build/openwakeword
SOURCES <span class="token operator">=</span> src/main.cpp

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span>
    mkdir -p build
    <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>重新编译</strong> :<br> 完成上述步骤后，重新运行<code>make</code>命令进行编译。</li></ol><p>希望这些步骤能帮你解决问题。如果问题依然存在，请检查是否有任何额外的错误信息，并确保所有依赖库和头文件路径正确设置。</p><p>You:</p>`,7),J=n("br",null,null,-1),H=n("br",null,null,-1),z=n("br",null,null,-1),P={href:"http://LICENSE.md",target:"_blank",rel:"noopener noreferrer"},K=n("br",null,null,-1),q=n("br",null,null,-1),Y={href:"http://README.md",target:"_blank",rel:"noopener noreferrer"},V=n("br",null,null,-1),F=n("br",null,null,-1),U=n("br",null,null,-1),B=n("br",null,null,-1),Z=n("br",null,null,-1),Q=n("br",null,null,-1),nn=n("br",null,null,-1),sn=n("br",null,null,-1),an=n("br",null,null,-1),en=n("br",null,null,-1),tn=n("br",null,null,-1),ln=n("br",null,null,-1),pn=n("br",null,null,-1),on=n("br",null,null,-1),cn=n("p",null,"ChatGPT:",-1),un=n("br",null,null,-1),rn=n("br",null,null,-1),dn=n("br",null,null,-1),mn={href:"http://LICENSE.md",target:"_blank",rel:"noopener noreferrer"},kn=n("br",null,null,-1),vn=n("br",null,null,-1),bn={href:"http://README.md",target:"_blank",rel:"noopener noreferrer"},hn=n("br",null,null,-1),gn=n("br",null,null,-1),_n=n("br",null,null,-1),fn=n("br",null,null,-1),xn=n("br",null,null,-1),Nn=n("br",null,null,-1),yn=n("br",null,null,-1),On=n("br",null,null,-1),In=n("br",null,null,-1),Rn=n("br",null,null,-1),wn=n("br",null,null,-1),Xn=n("br",null,null,-1),Dn=n("br",null,null,-1),Cn=n("br",null,null,-1),An=t(`<p>You:</p><ul><li>在你的项目目录结构中，<code>models</code>文件夹下的<code>.onnx</code>文件是模型文件，具体如下：</li><li><code>alexa_v0.1.onnx</code></li><li><code>embedding_model.onnx</code></li><li><code>hey_jarvis_v0.1.onnx</code></li><li><code>hey_marvin_v0.1.onnx</code></li><li><code>hey_mycroft_v0.1.onnx</code></li><li><code>melspectrogram.onnx</code></li></ul><p>这些模型文件通常用于语音识别和特征提取。它们在不同的阶段被加载和执行，以实现语音唤醒的功能。</p><h3 id="使用onnx模型的步骤" tabindex="-1"><a class="header-anchor" href="#使用onnx模型的步骤"><span>使用ONNX模型的步骤</span></a></h3><ol><li><strong>加载ONNX模型</strong> :<br> 使用ONNX Runtime库加载模型文件。ONNX Runtime提供了C++ API，可以方便地加载和运行ONNX模型。</li><li><strong>处理输入数据</strong> :<br> 根据模型的要求，预处理输入数据。对于语音唤醒系统，输入数据通常是音频信号。你可能需要将音频信号转换为特征表示（例如梅尔频谱图），这可能是<code>melspectrogram.onnx</code>模型的用途。</li><li><strong>运行推理</strong> :<br> 将预处理后的数据输入到加载的ONNX模型中，运行推理，获取输出结果。不同的模型会有不同的输出，比如特征向量或唤醒词的概率。</li><li><strong>处理输出数据</strong> :<br> 根据输出结果执行相应的操作。例如，如果唤醒词被正确识别，可以触发后续的应用逻辑。</li></ol><h3 id="具体代码示例" tabindex="-1"><a class="header-anchor" href="#具体代码示例"><span>具体代码示例</span></a></h3><p>以下是一个示例代码，展示如何加载和运行一个ONNX模型。这个示例假设你已经正确配置了ONNX Runtime库和头文件：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;onnxruntime_cxx_api.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Initialize ONNX Runtime environment</span>
    Ort<span class="token double-colon punctuation">::</span>Env <span class="token function">env</span><span class="token punctuation">(</span>ORT_LOGGING_LEVEL_WARNING<span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Create an ONNX Runtime session options object</span>
    Ort<span class="token double-colon punctuation">::</span>SessionOptions session_options<span class="token punctuation">;</span>
    session_options<span class="token punctuation">.</span><span class="token function">SetIntraOpNumThreads</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Load the model</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> model_path <span class="token operator">=</span> <span class="token string">&quot;models/hey_jarvis_v0.1.onnx&quot;</span><span class="token punctuation">;</span>
    Ort<span class="token double-colon punctuation">::</span>Session <span class="token function">session</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> model_path<span class="token punctuation">,</span> session_options<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Print input node names and shapes</span>
    Ort<span class="token double-colon punctuation">::</span>AllocatorWithDefaultOptions allocator<span class="token punctuation">;</span>
    size_t num_input_nodes <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token function">input_node_names</span><span class="token punctuation">(</span>num_input_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">&gt;&gt;</span> <span class="token function">input_node_dims</span><span class="token punctuation">(</span>num_input_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_input_nodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Get input node names</span>
        input_node_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Input &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: name=&quot;</span> <span class="token operator">&lt;&lt;</span> input_node_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

        <span class="token comment">// Get input node types and shapes</span>
        Ort<span class="token double-colon punctuation">::</span>TypeInfo type_info <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputTypeInfo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> tensor_info <span class="token operator">=</span> type_info<span class="token punctuation">.</span><span class="token function">GetTensorTypeAndShapeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        input_node_dims<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tensor_info<span class="token punctuation">.</span><span class="token function">GetShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Example input data</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span> input_tensor_values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/* your input data here */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">&gt;</span> input_shape <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/* your input shape here */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Create input tensor</span>
    Ort<span class="token double-colon punctuation">::</span>MemoryInfo memory_info <span class="token operator">=</span> Ort<span class="token double-colon punctuation">::</span><span class="token class-name">MemoryInfo</span><span class="token double-colon punctuation">::</span><span class="token function">CreateCpu</span><span class="token punctuation">(</span>OrtArenaAllocator<span class="token punctuation">,</span> OrtMemTypeDefault<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Ort<span class="token double-colon punctuation">::</span>Value input_tensor <span class="token operator">=</span> Ort<span class="token double-colon punctuation">::</span>Value<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">CreateTensor</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>memory_info<span class="token punctuation">,</span> input_tensor_values<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_tensor_values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Run the model</span>
    <span class="token keyword">auto</span> output_tensors <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Ort<span class="token double-colon punctuation">::</span>RunOptions<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">,</span> input_node_names<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input_tensor<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Process output</span>
    <span class="token keyword">float</span><span class="token operator">*</span> floatarr <span class="token operator">=</span> output_tensors<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">GetTensorMutableData</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> output_tensors<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTensorTypeAndShapeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetElementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Output value &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> floatarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决当前报错的方法" tabindex="-1"><a class="header-anchor" href="#解决当前报错的方法"><span>解决当前报错的方法</span></a></h3><p>根据之前的问题描述，你的编译器找不到<code>onnxruntime_cxx_api.h</code>头文件。请确保以下几点：</p><ol><li><strong>确认路径正确</strong> :<br> 确认<code>lib/arm64/include</code>目录下确实存在<code>onnxruntime_cxx_api.h</code>头文件。</li><li><strong>更新路径</strong> :<br> 如果文件不在正确的位置，请将其放置到正确的目录中。你可以通过以下命令检查和复制文件：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> /path/to/onnxruntime/include/onnxruntime/core/session/onnxruntime_cxx_api.h lib/arm64/include/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>编译项目</strong> :<br> 确认路径无误后，重新运行<code>make</code>命令进行编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>希望这些信息能帮助你解决问题。如果你需要更多帮助，请提供更多的错误信息或上下文。</p><p>4o</p><p>ChatGPT:</p><ul><li>在你的项目目录结构中，<code>models</code>文件夹下的<code>.onnx</code>文件是模型文件，具体如下：</li><li><code>alexa_v0.1.onnx</code></li><li><code>embedding_model.onnx</code></li><li><code>hey_jarvis_v0.1.onnx</code></li><li><code>hey_marvin_v0.1.onnx</code></li><li><code>hey_mycroft_v0.1.onnx</code></li><li><code>melspectrogram.onnx</code></li></ul><p>这些模型文件通常用于语音识别和特征提取。它们在不同的阶段被加载和执行，以实现语音唤醒的功能。</p><h3 id="使用onnx模型的步骤-1" tabindex="-1"><a class="header-anchor" href="#使用onnx模型的步骤-1"><span>使用ONNX模型的步骤</span></a></h3><ol><li><strong>加载ONNX模型</strong> :<br> 使用ONNX Runtime库加载模型文件。ONNX Runtime提供了C++ API，可以方便地加载和运行ONNX模型。</li><li><strong>处理输入数据</strong> :<br> 根据模型的要求，预处理输入数据。对于语音唤醒系统，输入数据通常是音频信号。你可能需要将音频信号转换为特征表示（例如梅尔频谱图），这可能是<code>melspectrogram.onnx</code>模型的用途。</li><li><strong>运行推理</strong> :<br> 将预处理后的数据输入到加载的ONNX模型中，运行推理，获取输出结果。不同的模型会有不同的输出，比如特征向量或唤醒词的概率。</li><li><strong>处理输出数据</strong> :<br> 根据输出结果执行相应的操作。例如，如果唤醒词被正确识别，可以触发后续的应用逻辑。</li></ol><h3 id="具体代码示例-1" tabindex="-1"><a class="header-anchor" href="#具体代码示例-1"><span>具体代码示例</span></a></h3><p>以下是一个示例代码，展示如何加载和运行一个ONNX模型。这个示例假设你已经正确配置了ONNX Runtime库和头文件：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;onnxruntime_cxx_api.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Initialize ONNX Runtime environment</span>
    Ort<span class="token double-colon punctuation">::</span>Env <span class="token function">env</span><span class="token punctuation">(</span>ORT_LOGGING_LEVEL_WARNING<span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Create an ONNX Runtime session options object</span>
    Ort<span class="token double-colon punctuation">::</span>SessionOptions session_options<span class="token punctuation">;</span>
    session_options<span class="token punctuation">.</span><span class="token function">SetIntraOpNumThreads</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Load the model</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> model_path <span class="token operator">=</span> <span class="token string">&quot;models/hey_jarvis_v0.1.onnx&quot;</span><span class="token punctuation">;</span>
    Ort<span class="token double-colon punctuation">::</span>Session <span class="token function">session</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> model_path<span class="token punctuation">,</span> session_options<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Print input node names and shapes</span>
    Ort<span class="token double-colon punctuation">::</span>AllocatorWithDefaultOptions allocator<span class="token punctuation">;</span>
    size_t num_input_nodes <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token function">input_node_names</span><span class="token punctuation">(</span>num_input_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">&gt;&gt;</span> <span class="token function">input_node_dims</span><span class="token punctuation">(</span>num_input_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_input_nodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Get input node names</span>
        input_node_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Input &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: name=&quot;</span> <span class="token operator">&lt;&lt;</span> input_node_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

        <span class="token comment">// Get input node types and shapes</span>
        Ort<span class="token double-colon punctuation">::</span>TypeInfo type_info <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputTypeInfo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> tensor_info <span class="token operator">=</span> type_info<span class="token punctuation">.</span><span class="token function">GetTensorTypeAndShapeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        input_node_dims<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tensor_info<span class="token punctuation">.</span><span class="token function">GetShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Example input data</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span> input_tensor_values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/* your input data here */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">&gt;</span> input_shape <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/* your input shape here */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Create input tensor</span>
    Ort<span class="token double-colon punctuation">::</span>MemoryInfo memory_info <span class="token operator">=</span> Ort<span class="token double-colon punctuation">::</span><span class="token class-name">MemoryInfo</span><span class="token double-colon punctuation">::</span><span class="token function">CreateCpu</span><span class="token punctuation">(</span>OrtArenaAllocator<span class="token punctuation">,</span> OrtMemTypeDefault<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Ort<span class="token double-colon punctuation">::</span>Value input_tensor <span class="token operator">=</span> Ort<span class="token double-colon punctuation">::</span>Value<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">CreateTensor</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>memory_info<span class="token punctuation">,</span> input_tensor_values<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_tensor_values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Run the model</span>
    <span class="token keyword">auto</span> output_tensors <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Ort<span class="token double-colon punctuation">::</span>RunOptions<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">,</span> input_node_names<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input_tensor<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Process output</span>
    <span class="token keyword">float</span><span class="token operator">*</span> floatarr <span class="token operator">=</span> output_tensors<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">GetTensorMutableData</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> output_tensors<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTensorTypeAndShapeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetElementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Output value &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> floatarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决当前报错的方法-1" tabindex="-1"><a class="header-anchor" href="#解决当前报错的方法-1"><span>解决当前报错的方法</span></a></h3><p>根据之前的问题描述，你的编译器找不到<code>onnxruntime_cxx_api.h</code>头文件。请确保以下几点：</p><ol><li><strong>确认路径正确</strong> :<br> 确认<code>lib/arm64/include</code>目录下确实存在<code>onnxruntime_cxx_api.h</code>头文件。</li><li><strong>更新路径</strong> :<br> 如果文件不在正确的位置，请将其放置到正确的目录中。你可以通过以下命令检查和复制文件：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> /path/to/onnxruntime/include/onnxruntime/core/session/onnxruntime_cxx_api.h lib/arm64/include/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>编译项目</strong> :<br> 确认路径无误后，重新运行<code>make</code>命令进行编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>希望这些信息能帮助你解决问题。如果你需要更多帮助，请提供更多的错误信息或上下文。</p><p>You:</p><ul><li>lib/arm64是linux的写法，我是m1的mac，我不清楚我的c++包位于哪个文件，你应该针对我的设备给我提出相应的意见</li></ul><p>2/2</p><p>ChatGPT:</p><ul><li>lib/arm64是linux的写法，我是m1的mac，我不清楚我的c++包位于哪个文件，你应该针对我的设备给我提出相应的意见</li></ul><p>You:</p><ul><li>针对你的M1 Mac设备，请参考以下步骤来解决编译问题：</li></ul><ol><li><strong>安装ONNX Runtime</strong> :<br> 在M1 Mac上，你可以使用Homebrew来安装ONNX Runtime。首先，确保你已经安装了Homebrew，然后执行以下命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> onnxruntime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>查找头文件和库文件</strong> :<br> Homebrew通常会将头文件和库文件安装在<code>/opt/homebrew/</code>目录下。安装完成后，头文件和库文件的路径可能类似于以下路径：</li></ol><ul><li>头文件：<code>/opt/homebrew/include/onnxruntime/core/session/onnxruntime_cxx_api.h</code></li><li>库文件：<code>/opt/homebrew/lib/libonnxruntime.dylib</code></li></ul><ol start="3"><li><strong>更新Makefile</strong> :<br> 修改你的Makefile，将头文件和库文件的路径指向Homebrew安装的位置。假设上述路径正确，你的Makefile应类似如下：</li></ol><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CXX <span class="token operator">=</span> g++
CXXFLAGS <span class="token operator">=</span> -I/opt/homebrew/<span class="token keyword">include</span> -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra
LDFLAGS <span class="token operator">=</span> -L/opt/homebrew/lib -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span>
LIBS <span class="token operator">=</span> -lpthread -lonnxruntime

TARGET <span class="token operator">=</span> build/openwakeword
SOURCES <span class="token operator">=</span> src/main.cpp

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span>
    mkdir -p build
    <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>编译项目</strong> :<br> 完成上述修改后，尝试重新运行<code>make</code>命令进行编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证路径" tabindex="-1"><a class="header-anchor" href="#验证路径"><span>验证路径</span></a></h3><p>确保路径正确，验证安装后的文件路径，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> /opt/homebrew/include/onnxruntime/core/session/onnxruntime_cxx_api.h
<span class="token function">ls</span> /opt/homebrew/lib/libonnxruntime.dylib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这些文件存在并且路径正确，<code>make</code>命令应该能成功编译。</p><h3 id="示例代码调整" tabindex="-1"><a class="header-anchor" href="#示例代码调整"><span>示例代码调整</span></a></h3><p>根据上述Makefile，以下是简化后的代码示例，演示如何在你的项目中使用ONNX Runtime：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;onnxruntime_cxx_api.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Initialize ONNX Runtime environment</span>
    Ort<span class="token double-colon punctuation">::</span>Env <span class="token function">env</span><span class="token punctuation">(</span>ORT_LOGGING_LEVEL_WARNING<span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Create an ONNX Runtime session options object</span>
    Ort<span class="token double-colon punctuation">::</span>SessionOptions session_options<span class="token punctuation">;</span>
    session_options<span class="token punctuation">.</span><span class="token function">SetIntraOpNumThreads</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Load the model</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> model_path <span class="token operator">=</span> <span class="token string">&quot;models/hey_jarvis_v0.1.onnx&quot;</span><span class="token punctuation">;</span>
    Ort<span class="token double-colon punctuation">::</span>Session <span class="token function">session</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> model_path<span class="token punctuation">,</span> session_options<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Print input node names and shapes</span>
    Ort<span class="token double-colon punctuation">::</span>AllocatorWithDefaultOptions allocator<span class="token punctuation">;</span>
    size_t num_input_nodes <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token function">input_node_names</span><span class="token punctuation">(</span>num_input_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">&gt;&gt;</span> <span class="token function">input_node_dims</span><span class="token punctuation">(</span>num_input_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_input_nodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Get input node names</span>
        input_node_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Input &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: name=&quot;</span> <span class="token operator">&lt;&lt;</span> input_node_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

        <span class="token comment">// Get input node types and shapes</span>
        Ort<span class="token double-colon punctuation">::</span>TypeInfo type_info <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputTypeInfo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> tensor_info <span class="token operator">=</span> type_info<span class="token punctuation">.</span><span class="token function">GetTensorTypeAndShapeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        input_node_dims<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tensor_info<span class="token punctuation">.</span><span class="token function">GetShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Example input data</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span> input_tensor_values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/* your input data here */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">&gt;</span> input_shape <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/* your input shape here */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Create input tensor</span>
    Ort<span class="token double-colon punctuation">::</span>MemoryInfo memory_info <span class="token operator">=</span> Ort<span class="token double-colon punctuation">::</span><span class="token class-name">MemoryInfo</span><span class="token double-colon punctuation">::</span><span class="token function">CreateCpu</span><span class="token punctuation">(</span>OrtArenaAllocator<span class="token punctuation">,</span> OrtMemTypeDefault<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Ort<span class="token double-colon punctuation">::</span>Value input_tensor <span class="token operator">=</span> Ort<span class="token double-colon punctuation">::</span>Value<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">CreateTensor</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>memory_info<span class="token punctuation">,</span> input_tensor_values<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_tensor_values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Run the model</span>
    <span class="token keyword">auto</span> output_tensors <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Ort<span class="token double-colon punctuation">::</span>RunOptions<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">,</span> input_node_names<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input_tensor<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Process output</span>
    <span class="token keyword">float</span><span class="token operator">*</span> floatarr <span class="token operator">=</span> output_tensors<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">GetTensorMutableData</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> output_tensors<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTensorTypeAndShapeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetElementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Output value &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> floatarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希望这些步骤能够帮助你在M1 Mac上正确编译和运行你的项目。如果你遇到任何问题，请随时反馈具体的错误信息，以便进一步协助你解决问题。</p><p>4o</p><p>ChatGPT:</p><ul><li>针对你的M1 Mac设备，请参考以下步骤来解决编译问题：</li></ul><ol><li><strong>安装ONNX Runtime</strong> :<br> 在M1 Mac上，你可以使用Homebrew来安装ONNX Runtime。首先，确保你已经安装了Homebrew，然后执行以下命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> onnxruntime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>查找头文件和库文件</strong> :<br> Homebrew通常会将头文件和库文件安装在<code>/opt/homebrew/</code>目录下。安装完成后，头文件和库文件的路径可能类似于以下路径：</li></ol><ul><li>头文件：<code>/opt/homebrew/include/onnxruntime/core/session/onnxruntime_cxx_api.h</code></li><li>库文件：<code>/opt/homebrew/lib/libonnxruntime.dylib</code></li></ul><ol start="3"><li><strong>更新Makefile</strong> :<br> 修改你的Makefile，将头文件和库文件的路径指向Homebrew安装的位置。假设上述路径正确，你的Makefile应类似如下：</li></ol><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CXX <span class="token operator">=</span> g++
CXXFLAGS <span class="token operator">=</span> -I/opt/homebrew/<span class="token keyword">include</span> -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra
LDFLAGS <span class="token operator">=</span> -L/opt/homebrew/lib -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span>
LIBS <span class="token operator">=</span> -lpthread -lonnxruntime

TARGET <span class="token operator">=</span> build/openwakeword
SOURCES <span class="token operator">=</span> src/main.cpp

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span>
    mkdir -p build
    <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>编译项目</strong> :<br> 完成上述修改后，尝试重新运行<code>make</code>命令进行编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证路径-1" tabindex="-1"><a class="header-anchor" href="#验证路径-1"><span>验证路径</span></a></h3><p>确保路径正确，验证安装后的文件路径，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> /opt/homebrew/include/onnxruntime/core/session/onnxruntime_cxx_api.h
<span class="token function">ls</span> /opt/homebrew/lib/libonnxruntime.dylib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这些文件存在并且路径正确，<code>make</code>命令应该能成功编译。</p><h3 id="示例代码调整-1" tabindex="-1"><a class="header-anchor" href="#示例代码调整-1"><span>示例代码调整</span></a></h3><p>根据上述Makefile，以下是简化后的代码示例，演示如何在你的项目中使用ONNX Runtime：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;onnxruntime_cxx_api.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Initialize ONNX Runtime environment</span>
    Ort<span class="token double-colon punctuation">::</span>Env <span class="token function">env</span><span class="token punctuation">(</span>ORT_LOGGING_LEVEL_WARNING<span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Create an ONNX Runtime session options object</span>
    Ort<span class="token double-colon punctuation">::</span>SessionOptions session_options<span class="token punctuation">;</span>
    session_options<span class="token punctuation">.</span><span class="token function">SetIntraOpNumThreads</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Load the model</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> model_path <span class="token operator">=</span> <span class="token string">&quot;models/hey_jarvis_v0.1.onnx&quot;</span><span class="token punctuation">;</span>
    Ort<span class="token double-colon punctuation">::</span>Session <span class="token function">session</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> model_path<span class="token punctuation">,</span> session_options<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Print input node names and shapes</span>
    Ort<span class="token double-colon punctuation">::</span>AllocatorWithDefaultOptions allocator<span class="token punctuation">;</span>
    size_t num_input_nodes <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token function">input_node_names</span><span class="token punctuation">(</span>num_input_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">&gt;&gt;</span> <span class="token function">input_node_dims</span><span class="token punctuation">(</span>num_input_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_input_nodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Get input node names</span>
        input_node_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Input &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: name=&quot;</span> <span class="token operator">&lt;&lt;</span> input_node_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

        <span class="token comment">// Get input node types and shapes</span>
        Ort<span class="token double-colon punctuation">::</span>TypeInfo type_info <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetInputTypeInfo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> tensor_info <span class="token operator">=</span> type_info<span class="token punctuation">.</span><span class="token function">GetTensorTypeAndShapeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        input_node_dims<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tensor_info<span class="token punctuation">.</span><span class="token function">GetShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Example input data</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span> input_tensor_values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/* your input data here */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">&gt;</span> input_shape <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/* your input shape here */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Create input tensor</span>
    Ort<span class="token double-colon punctuation">::</span>MemoryInfo memory_info <span class="token operator">=</span> Ort<span class="token double-colon punctuation">::</span><span class="token class-name">MemoryInfo</span><span class="token double-colon punctuation">::</span><span class="token function">CreateCpu</span><span class="token punctuation">(</span>OrtArenaAllocator<span class="token punctuation">,</span> OrtMemTypeDefault<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Ort<span class="token double-colon punctuation">::</span>Value input_tensor <span class="token operator">=</span> Ort<span class="token double-colon punctuation">::</span>Value<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">CreateTensor</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>memory_info<span class="token punctuation">,</span> input_tensor_values<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_tensor_values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Run the model</span>
    <span class="token keyword">auto</span> output_tensors <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Ort<span class="token double-colon punctuation">::</span>RunOptions<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">,</span> input_node_names<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input_tensor<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Process output</span>
    <span class="token keyword">float</span><span class="token operator">*</span> floatarr <span class="token operator">=</span> output_tensors<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">GetTensorMutableData</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> output_tensors<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTensorTypeAndShapeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetElementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Output value &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> floatarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希望这些步骤能够帮助你在M1 Mac上正确编译和运行你的项目。如果你遇到任何问题，请随时反馈具体的错误信息，以便进一步协助你解决问题。</p><p>You:</p><ul><li><img src="https://files.oaiusercontent.com/file-VKu8bczysP0lVIPN4AW3D996?se=2024-05-18T16%3A19%3A20Z&amp;sp=r&amp;sv=2023-11-03&amp;sr=b&amp;rscc=max-age%3D299%2C immutable&amp;rscd=attachment%3B filename%3Dimage.png&amp;sig=gaKIG1KXyTAfDOSuSuXVTRABQ8DDsx9OQFCK2LWit1Y%3D" alt="已上传的图片" tabindex="0" loading="lazy"><figcaption>已上传的图片</figcaption></li></ul><p>我这样安装的onnxruntime_cxx_api包并没有被正确的识别，应该看一下我项目引用的其他的c++头文件在电脑上什么位置吧，至于我brew安装的onnxruntime_cxx_api包并没有被正确的识别，那我c++该怎么下载这个包呢？</p><p>ChatGPT:</p><ul><li><img src="https://files.oaiusercontent.com/file-VKu8bczysP0lVIPN4AW3D996?se=2024-05-18T16%3A19%3A20Z&amp;sp=r&amp;sv=2023-11-03&amp;sr=b&amp;rscc=max-age%3D299%2C immutable&amp;rscd=attachment%3B filename%3Dimage.png&amp;sig=gaKIG1KXyTAfDOSuSuXVTRABQ8DDsx9OQFCK2LWit1Y%3D" alt="已上传的图片" tabindex="0" loading="lazy"><figcaption>已上传的图片</figcaption></li></ul><p>我这样安装的onnxruntime_cxx_api包并没有被正确的识别，应该看一下我项目引用的其他的c++头文件在电脑上什么位置吧，至于我brew安装的onnxruntime_cxx_api包并没有被正确的识别，那我c++该怎么下载这个包呢？</p><p>You:</p><ul><li>你所提供的截图显示了系统上的C++头文件路径。你需要确保ONNX Runtime的头文件和库文件路径与这些系统路径匹配。</li></ul><h3 id="检查onnx-runtime安装路径" tabindex="-1"><a class="header-anchor" href="#检查onnx-runtime安装路径"><span>检查ONNX Runtime安装路径</span></a></h3><p>首先，确认ONNX Runtime是否正确安装。你可以通过以下命令来查找ONNX Runtime头文件和库文件的路径：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew list onnxruntime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令将列出所有与ONNX Runtime相关的文件和路径。确保你可以看到头文件（例如<code>onnxruntime_cxx_api.h</code>）和库文件（例如<code>libonnxruntime.dylib</code>）的路径。</p><h3 id="设置正确的头文件和库文件路径" tabindex="-1"><a class="header-anchor" href="#设置正确的头文件和库文件路径"><span>设置正确的头文件和库文件路径</span></a></h3><p>根据Homebrew的默认安装路径，头文件和库文件应该位于<code>/opt/homebrew/</code>目录下。你可以使用以下步骤来确保你的项目能够正确引用这些文件。</p><ol><li><strong>查找头文件和库文件路径</strong> :</li></ol><p>确认这些文件的实际路径，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/opt/homebrew/include/onnxruntime/core/session/onnxruntime_cxx_api.h
/opt/homebrew/lib/libonnxruntime.dylib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>更新Makefile</strong> :</li></ol><p>修改你的Makefile，以确保编译器可以找到这些文件。假设上述路径正确，Makefile应如下所示：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CXX <span class="token operator">=</span> g++
CXXFLAGS <span class="token operator">=</span> -I/opt/homebrew/<span class="token keyword">include</span> -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra
LDFLAGS <span class="token operator">=</span> -L/opt/homebrew/lib -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span>
LIBS <span class="token operator">=</span> -lpthread -lonnxruntime

TARGET <span class="token operator">=</span> build/openwakeword
SOURCES <span class="token operator">=</span> src/main.cpp

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span>
    mkdir -p build
    <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>验证头文件路径</strong> :</li></ol><p>确认头文件路径正确。例如，检查头文件是否存在：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> /opt/homebrew/include/onnxruntime/core/session/onnxruntime_cxx_api.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果文件存在且路径正确，编译器应该能够找到它。</p><h3 id="手动下载和配置onnx-runtime" tabindex="-1"><a class="header-anchor" href="#手动下载和配置onnx-runtime"><span>手动下载和配置ONNX Runtime</span></a></h3><p>如果Homebrew无法正确安装ONNX Runtime，你也可以手动下载并配置：</p><ol><li><strong>下载ONNX Runtime</strong> :</li></ol>`,100),jn={href:"https://github.com/microsoft/onnxruntime",target:"_blank",rel:"noopener noreferrer"},$n=n("br",null,null,-1),Wn=n("strong",null,"解压并设置路径",-1),Mn=t(`<p>将下载的文件解压到一个合适的位置，例如<code>~/onnxruntime</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> onnxruntime-osx.tar.gz <span class="token parameter variable">-C</span> ~/onnxruntime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>更新Makefile</strong> :</li></ol><p>修改Makefile，以引用手动安装的ONNX Runtime路径：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CXX <span class="token operator">=</span> g++
CXXFLAGS <span class="token operator">=</span> -I~/onnxruntime/<span class="token keyword">include</span> -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra
LDFLAGS <span class="token operator">=</span> -L~/onnxruntime/lib -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span>
LIBS <span class="token operator">=</span> -lpthread -lonnxruntime

TARGET <span class="token operator">=</span> build/openwakeword
SOURCES <span class="token operator">=</span> src/main.cpp

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span>
    mkdir -p build
    <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>编译项目</strong> :</li></ol><p>确认路径无误后，重新运行<code>make</code>命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证安装" tabindex="-1"><a class="header-anchor" href="#验证安装"><span>验证安装</span></a></h3><p>确认你能成功编译并链接ONNX Runtime库。如果仍然有问题，提供具体的错误信息可以帮助进一步诊断问题。</p><p>4o</p><p>ChatGPT:</p><ul><li>你所提供的截图显示了系统上的C++头文件路径。你需要确保ONNX Runtime的头文件和库文件路径与这些系统路径匹配。</li></ul><h3 id="检查onnx-runtime安装路径-1" tabindex="-1"><a class="header-anchor" href="#检查onnx-runtime安装路径-1"><span>检查ONNX Runtime安装路径</span></a></h3><p>首先，确认ONNX Runtime是否正确安装。你可以通过以下命令来查找ONNX Runtime头文件和库文件的路径：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew list onnxruntime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令将列出所有与ONNX Runtime相关的文件和路径。确保你可以看到头文件（例如<code>onnxruntime_cxx_api.h</code>）和库文件（例如<code>libonnxruntime.dylib</code>）的路径。</p><h3 id="设置正确的头文件和库文件路径-1" tabindex="-1"><a class="header-anchor" href="#设置正确的头文件和库文件路径-1"><span>设置正确的头文件和库文件路径</span></a></h3><p>根据Homebrew的默认安装路径，头文件和库文件应该位于<code>/opt/homebrew/</code>目录下。你可以使用以下步骤来确保你的项目能够正确引用这些文件。</p><ol><li><strong>查找头文件和库文件路径</strong> :</li></ol><p>确认这些文件的实际路径，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/opt/homebrew/include/onnxruntime/core/session/onnxruntime_cxx_api.h
/opt/homebrew/lib/libonnxruntime.dylib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>更新Makefile</strong> :</li></ol><p>修改你的Makefile，以确保编译器可以找到这些文件。假设上述路径正确，Makefile应如下所示：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CXX <span class="token operator">=</span> g++
CXXFLAGS <span class="token operator">=</span> -I/opt/homebrew/<span class="token keyword">include</span> -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra
LDFLAGS <span class="token operator">=</span> -L/opt/homebrew/lib -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span>
LIBS <span class="token operator">=</span> -lpthread -lonnxruntime

TARGET <span class="token operator">=</span> build/openwakeword
SOURCES <span class="token operator">=</span> src/main.cpp

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span>
    mkdir -p build
    <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>验证头文件路径</strong> :</li></ol><p>确认头文件路径正确。例如，检查头文件是否存在：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> /opt/homebrew/include/onnxruntime/core/session/onnxruntime_cxx_api.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果文件存在且路径正确，编译器应该能够找到它。</p><h3 id="手动下载和配置onnx-runtime-1" tabindex="-1"><a class="header-anchor" href="#手动下载和配置onnx-runtime-1"><span>手动下载和配置ONNX Runtime</span></a></h3><p>如果Homebrew无法正确安装ONNX Runtime，你也可以手动下载并配置：</p><ol><li><strong>下载ONNX Runtime</strong> :</li></ol>`,32),Gn={href:"https://github.com/microsoft/onnxruntime",target:"_blank",rel:"noopener noreferrer"},Sn=n("br",null,null,-1),Ln=n("strong",null,"解压并设置路径",-1),Tn=t(`<p>将下载的文件解压到一个合适的位置，例如<code>~/onnxruntime</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> onnxruntime-osx.tar.gz <span class="token parameter variable">-C</span> ~/onnxruntime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>更新Makefile</strong> :</li></ol><p>修改Makefile，以引用手动安装的ONNX Runtime路径：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CXX <span class="token operator">=</span> g++
CXXFLAGS <span class="token operator">=</span> -I~/onnxruntime/<span class="token keyword">include</span> -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra
LDFLAGS <span class="token operator">=</span> -L~/onnxruntime/lib -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span>
LIBS <span class="token operator">=</span> -lpthread -lonnxruntime

TARGET <span class="token operator">=</span> build/openwakeword
SOURCES <span class="token operator">=</span> src/main.cpp

<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span>
    mkdir -p build
    <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOURCES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>编译项目</strong> :</li></ol><p>确认路径无误后，重新运行<code>make</code>命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证安装-1" tabindex="-1"><a class="header-anchor" href="#验证安装-1"><span>验证安装</span></a></h3><p>确认你能成功编译并链接ONNX Runtime库。如果仍然有问题，提供具体的错误信息可以帮助进一步诊断问题。</p><p>You:</p><ul><li><img src="https://files.oaiusercontent.com/file-l2v5lmfONkm2Lu5SNkGWwXyp?se=2024-05-18T16%3A24%3A42Z&amp;sp=r&amp;sv=2023-11-03&amp;sr=b&amp;rscc=max-age%3D299%2C immutable&amp;rscd=attachment%3B filename%3Dimage.png&amp;sig=tAwU2Yf5z6bC4zEzk4PURmEh6aEkk5Fe2iMlnfTHND4%3D" alt="已上传的图片" tabindex="0" loading="lazy"><figcaption>已上传的图片</figcaption></li></ul><p>这么多版本，哪个才是m1 mac能下载的版本？我想把这个包直接下载到我们的项目目录下面来运行，另外这是我的现在的makefile文件，只适用于linux系统，现在请你做相对应的修改使得他可以在m1 mac系统下运行：<br> .PHONY: release debug clean</p>`,13),En=n("p",null,[s("ARCH := "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"s"),n("mi",null,"h"),n("mi",null,"e"),n("mi",null,"l"),n("mi",null,"l"),n("mi",null,"u"),n("mi",null,"n"),n("mi",null,"a"),n("mi",null,"m"),n("mi",null,"e"),n("mo",null,"−"),n("mi",null,"m"),n("mo",{stretchy:"false"},")"),n("mi",null,"O"),n("mi",null,"N"),n("mi",null,"N"),n("mi",null,"X"),n("mi",null,"D"),n("mi",null,"I"),n("mi",null,"R"),n("mo",null,":"),n("mo",null,"="),n("mi",null,"l"),n("mi",null,"i"),n("mi",null,"b"),n("mi",{mathvariant:"normal"},"/")]),n("annotation",{encoding:"application/x-tex"},"(shell uname -m) ONNXDIR := lib/")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"ll"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"nam"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mclose"},")"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"ONNX"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},":="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"ib"),n("span",{class:"mord"},"/")])])]),s("(ARCH)")],-1),Jn=n("p",null,[s("release:"),n("br"),s(" mkdir -p build"),n("br"),s(" g++ -o build/openwakeword -I"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"O"),n("mi",null,"N"),n("mi",null,"N"),n("mi",null,"X"),n("mi",null,"D"),n("mi",null,"I"),n("mi",null,"R"),n("mo",{stretchy:"false"},")"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"c"),n("mi",null,"l"),n("mi",null,"u"),n("mi",null,"d"),n("mi",null,"e"),n("mo",null,"−"),n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"(ONNXDIR)/include -L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"ONNX"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),n("span",{class:"mclose"},")"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),s("(ONNXDIR)/lib -O2 -std=c++20 -Wall -Wextra -Wl,-rpath,'$$ORIGIN' src/main.cpp -lpthread -lonnxruntime"),n("br"),s(" cp -a $(ONNXDIR)/lib/* build/")],-1),Hn=n("p",null,[s("clean:"),n("br"),s(" rm -rf build/ dist/")],-1),zn=n("p",null,"ChatGPT:",-1),Pn=n("ul",null,[n("li",null,[n("img",{src:"https://files.oaiusercontent.com/file-l2v5lmfONkm2Lu5SNkGWwXyp?se=2024-05-18T16%3A24%3A42Z&sp=r&sv=2023-11-03&sr=b&rscc=max-age%3D299%2C immutable&rscd=attachment%3B filename%3Dimage.png&sig=tAwU2Yf5z6bC4zEzk4PURmEh6aEkk5Fe2iMlnfTHND4%3D",alt:"已上传的图片",tabindex:"0",loading:"lazy"}),n("figcaption",null,"已上传的图片")])],-1),Kn=n("p",null,[s("这么多版本，哪个才是m1 mac能下载的版本？我想把这个包直接下载到我们的项目目录下面来运行，另外这是我的现在的makefile文件，只适用于linux系统，现在请你做相对应的修改使得他可以在m1 mac系统下运行："),n("br"),s(" .PHONY: release debug clean")],-1),qn=n("p",null,[s("ARCH := "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"s"),n("mi",null,"h"),n("mi",null,"e"),n("mi",null,"l"),n("mi",null,"l"),n("mi",null,"u"),n("mi",null,"n"),n("mi",null,"a"),n("mi",null,"m"),n("mi",null,"e"),n("mo",null,"−"),n("mi",null,"m"),n("mo",{stretchy:"false"},")"),n("mi",null,"O"),n("mi",null,"N"),n("mi",null,"N"),n("mi",null,"X"),n("mi",null,"D"),n("mi",null,"I"),n("mi",null,"R"),n("mo",null,":"),n("mo",null,"="),n("mi",null,"l"),n("mi",null,"i"),n("mi",null,"b"),n("mi",{mathvariant:"normal"},"/")]),n("annotation",{encoding:"application/x-tex"},"(shell uname -m) ONNXDIR := lib/")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"ll"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"nam"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mclose"},")"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"ONNX"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},":="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"ib"),n("span",{class:"mord"},"/")])])]),s("(ARCH)")],-1),Yn=n("p",null,[s("release:"),n("br"),s(" mkdir -p build"),n("br"),s(" g++ -o build/openwakeword -I"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"O"),n("mi",null,"N"),n("mi",null,"N"),n("mi",null,"X"),n("mi",null,"D"),n("mi",null,"I"),n("mi",null,"R"),n("mo",{stretchy:"false"},")"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"c"),n("mi",null,"l"),n("mi",null,"u"),n("mi",null,"d"),n("mi",null,"e"),n("mo",null,"−"),n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"(ONNXDIR)/include -L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"ONNX"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),n("span",{class:"mclose"},")"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),s("(ONNXDIR)/lib -O2 -std=c++20 -Wall -Wextra -Wl,-rpath,'$$ORIGIN' src/main.cpp -lpthread -lonnxruntime"),n("br"),s(" cp -a $(ONNXDIR)/lib/* build/")],-1),Vn=t(`<p>clean:<br> rm -rf build/ dist/</p><p>You:</p><ul><li>针对你的问题和需求，我们可以选择适用于M1 Mac的ONNX Runtime版本，并调整Makefile使其能够在M1 Mac系统上正确运行。</li></ul><h3 id="选择适用的onnx-runtime版本" tabindex="-1"><a class="header-anchor" href="#选择适用的onnx-runtime版本"><span>选择适用的ONNX Runtime版本</span></a></h3><p>从你的截图来看，适用于M1 Mac的ONNX Runtime版本是：</p><ul><li><code>onnxruntime-osx-arm64-1.17.3.tgz</code></li></ul><p>下载这个版本并解压到你的项目目录中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/microsoft/onnxruntime/releases/download/v1.17.3/onnxruntime-osx-arm64-1.17.3.tgz
<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> onnxruntime-osx-arm64-1.17.3.tgz <span class="token parameter variable">-C</span> ./lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改makefile" tabindex="-1"><a class="header-anchor" href="#修改makefile"><span>修改Makefile</span></a></h3><p>将Makefile修改为适用于macOS系统，并引用下载的ONNX Runtime库和头文件。假设你已经将ONNX Runtime解压到<code>lib/arm64</code>目录下，以下是更新后的Makefile：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>

<span class="token target symbol">release</span><span class="token punctuation">:</span>
	mkdir -p build
	g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;@loader_path&#39;</span> src/main.cpp -lpthread -lonnxruntime
	cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构</span></a></h3><p>确保你的目录结构如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>openWakeWord-cpp
├── LICENSE.md
├── Makefile
├── README.md
├── build
├── lib
│   └── arm64
│       ├── include
│       │   └── onnxruntime
│       │       └── core
│       │           └── session
│       │               └── onnxruntime_cxx_api.h
│       ├── lib
│       │   ├── libonnxruntime.dylib
│       │   └── ...
├── models
│   ├── alexa_v0.1.onnx
│   ├── embedding_model.onnx
│   ├── hey_jarvis_v0.1.onnx
│   ├── hey_marvin_v0.1.onnx
│   ├── hey_mycroft_v0.1.onnx
│   └── melspectrogram.onnx
├── src
│   ├── CMakeLists.txt
│   ├── android
│   ├── main.cpp
│   └── main.h
└── openWakeWord-cpp.iml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译和运行" tabindex="-1"><a class="header-anchor" href="#编译和运行"><span>编译和运行</span></a></h3><p>确保路径正确后，执行以下命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证编译" tabindex="-1"><a class="header-anchor" href="#验证编译"><span>验证编译</span></a></h3><p>确保编译成功后，运行生成的可执行文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./build/openwakeword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你遇到任何问题，请提供具体的错误信息以便进一步诊断和解决问题。</p><p>1/2</p><p>4o</p><p>ChatGPT:</p><ul><li>针对你的问题和需求，我们可以选择适用于M1 Mac的ONNX Runtime版本，并调整Makefile使其能够在M1 Mac系统上正确运行。</li></ul><h3 id="选择适用的onnx-runtime版本-1" tabindex="-1"><a class="header-anchor" href="#选择适用的onnx-runtime版本-1"><span>选择适用的ONNX Runtime版本</span></a></h3><p>从你的截图来看，适用于M1 Mac的ONNX Runtime版本是：</p><ul><li><code>onnxruntime-osx-arm64-1.17.3.tgz</code></li></ul><p>下载这个版本并解压到你的项目目录中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/microsoft/onnxruntime/releases/download/v1.17.3/onnxruntime-osx-arm64-1.17.3.tgz
<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> onnxruntime-osx-arm64-1.17.3.tgz <span class="token parameter variable">-C</span> ./lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改makefile-1" tabindex="-1"><a class="header-anchor" href="#修改makefile-1"><span>修改Makefile</span></a></h3><p>将Makefile修改为适用于macOS系统，并引用下载的ONNX Runtime库和头文件。假设你已经将ONNX Runtime解压到<code>lib/arm64</code>目录下，以下是更新后的Makefile：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>

<span class="token target symbol">release</span><span class="token punctuation">:</span>
	mkdir -p build
	g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;@loader_path&#39;</span> src/main.cpp -lpthread -lonnxruntime
	cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目录结构-1" tabindex="-1"><a class="header-anchor" href="#目录结构-1"><span>目录结构</span></a></h3><p>确保你的目录结构如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>openWakeWord-cpp
├── LICENSE.md
├── Makefile
├── README.md
├── build
├── lib
│   └── arm64
│       ├── include
│       │   └── onnxruntime
│       │       └── core
│       │           └── session
│       │               └── onnxruntime_cxx_api.h
│       ├── lib
│       │   ├── libonnxruntime.dylib
│       │   └── ...
├── models
│   ├── alexa_v0.1.onnx
│   ├── embedding_model.onnx
│   ├── hey_jarvis_v0.1.onnx
│   ├── hey_marvin_v0.1.onnx
│   ├── hey_mycroft_v0.1.onnx
│   └── melspectrogram.onnx
├── src
│   ├── CMakeLists.txt
│   ├── android
│   ├── main.cpp
│   └── main.h
└── openWakeWord-cpp.iml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译和运行-1" tabindex="-1"><a class="header-anchor" href="#编译和运行-1"><span>编译和运行</span></a></h3><p>确保路径正确后，执行以下命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证编译-1" tabindex="-1"><a class="header-anchor" href="#验证编译-1"><span>验证编译</span></a></h3><p>确保编译成功后，运行生成的可执行文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./build/openwakeword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你遇到任何问题，请提供具体的错误信息以便进一步诊断和解决问题。</p><p>You:</p>`,44),Fn={href:"https://github.com/microsoft/onnxruntime/releases/download/v1.17.3/onnxruntime-osx-arm64-1.17.3.tgz",target:"_blank",rel:"noopener noreferrer"},Un=n("p",null,"zsh: command not found: wget",-1),Bn=n("p",null,"ChatGPT:",-1),Zn={href:"https://github.com/microsoft/onnxruntime/releases/download/v1.17.3/onnxruntime-osx-arm64-1.17.3.tgz",target:"_blank",rel:"noopener noreferrer"},Qn=t(`<p>zsh: command not found: wget</p><p>You:</p><ul><li>如果你的系统没有安装<code>wget</code>，你可以使用<code>curl</code>来下载文件。以下是如何使用<code>curl</code>下载并解压ONNX Runtime文件的步骤：</li></ul><ol><li><strong>下载ONNX Runtime</strong> :</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-o</span> onnxruntime-osx-arm64-1.17.3.tgz https://github.com/microsoft/onnxruntime/releases/download/v1.17.3/onnxruntime-osx-arm64-1.17.3.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>解压ONNX Runtime</strong> :</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> lib/arm64
<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> onnxruntime-osx-arm64-1.17.3.tgz <span class="token parameter variable">-C</span> lib/arm64 --strip-components<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>修改Makefile</strong> :<br> 更新Makefile以适应M1 Mac环境：</li></ol><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>编译项目</strong> :<br> 在项目目录中运行以下命令进行编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述步骤将下载、解压并配置ONNX Runtime库以便在M1 Mac上使用，并将更新的Makefile用于项目编译。如果在任何步骤中遇到问题，请提供具体的错误信息以便进一步协助。</p><p>4o</p><p>ChatGPT:</p><ul><li>如果你的系统没有安装<code>wget</code>，你可以使用<code>curl</code>来下载文件。以下是如何使用<code>curl</code>下载并解压ONNX Runtime文件的步骤：</li></ul><ol><li><strong>下载ONNX Runtime</strong> :</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-o</span> onnxruntime-osx-arm64-1.17.3.tgz https://github.com/microsoft/onnxruntime/releases/download/v1.17.3/onnxruntime-osx-arm64-1.17.3.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>解压ONNX Runtime</strong> :</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> lib/arm64
<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> onnxruntime-osx-arm64-1.17.3.tgz <span class="token parameter variable">-C</span> lib/arm64 --strip-components<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>修改Makefile</strong> :<br> 更新Makefile以适应M1 Mac环境：</li></ol><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>编译项目</strong> :<br> 在项目目录中运行以下命令进行编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述步骤将下载、解压并配置ONNX Runtime库以便在M1 Mac上使用，并将更新的Makefile用于项目编译。如果在任何步骤中遇到问题，请提供具体的错误信息以便进一步协助。</p><p>You:</p><ul><li>这里还有一个报错是为啥？代码是这个#include &lt;jni.h&gt;<br> 报错如下：<br> 基于 configurationProvider 设置提供的信息检测到 #include 错误。已针对此翻译单元(/Users/jiejaitt/Desktop/openWakeWord-cpp/src/main.h)禁用波形曲线。</li></ul><p>ChatGPT:</p><ul><li>这里还有一个报错是为啥？代码是这个#include &lt;jni.h&gt;<br> 报错如下：<br> 基于 configurationProvider 设置提供的信息检测到 #include 错误。已针对此翻译单元(/Users/jiejaitt/Desktop/openWakeWord-cpp/src/main.h)禁用波形曲线。</li></ul><p>You:</p><ul><li><code>#include &lt;jni.h&gt;</code>错误通常意味着系统找不到Java Native Interface (JNI)的头文件。对于macOS上的M1设备，你需要确保Java开发工具包（JDK）正确安装，并且配置文件路径以便编译器能找到这些头文件。</li></ul><p>以下是解决这个问题的步骤：</p><h3 id="_1-安装jdk" tabindex="-1"><a class="header-anchor" href="#_1-安装jdk"><span>1. 安装JDK</span></a></h3><p>如果你还没有安装JDK，可以使用Homebrew安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> openjdk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-查找jdk路径" tabindex="-1"><a class="header-anchor" href="#_2-查找jdk路径"><span>2. 查找JDK路径</span></a></h3><p>使用以下命令查找JDK的安装路径：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/usr/libexec/java_home
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将返回JDK的根目录，例如：<code>/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home</code></p><h3 id="_3-更新makefile" tabindex="-1"><a class="header-anchor" href="#_3-更新makefile"><span>3. 更新Makefile</span></a></h3><p>你需要在Makefile中指定JNI头文件的路径。在Makefile中添加包含路径和库路径：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JDKDIR <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> /usr/libexec/java_home<span class="token punctuation">)</span>

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JDKDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JDKDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span>/darwin -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-编译项目" tabindex="-1"><a class="header-anchor" href="#_4-编译项目"><span>4. 编译项目</span></a></h3><p>运行以下命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证头文件路径" tabindex="-1"><a class="header-anchor" href="#验证头文件路径"><span>验证头文件路径</span></a></h3><p>确保路径正确，验证头文件是否存在。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token variable"><span class="token variable">$(</span>JDKDIR<span class="token variable">)</span></span>/include/jni.h
<span class="token function">ls</span> <span class="token variable"><span class="token variable">$(</span>JDKDIR<span class="token variable">)</span></span>/include/darwin/jni_md.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果文件存在且路径正确，编译器应该能够找到它们。</p><h3 id="如果仍有问题" tabindex="-1"><a class="header-anchor" href="#如果仍有问题"><span>如果仍有问题</span></a></h3><ol><li><strong>确保JDK正确安装</strong> ：<br> 确保你安装的是正确版本的JDK，并且系统环境变量已正确配置。</li><li><strong>检查环境变量</strong> ：<br> 确保<code>JAVA_HOME</code>环境变量已正确设置，可以在终端中执行以下命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$JAVA_HOME</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有输出，或者输出错误路径，设置<code>JAVA_HOME</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>/usr/libexec/java_home<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并将其添加到你的shell配置文件（例如<code>.zshrc</code>或<code>.bashrc</code>）中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;export JAVA_HOME=$(/usr/libexec/java_home)&#39;</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc
<span class="token builtin class-name">source</span> ~/.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>希望这些步骤能帮助你解决编译错误。如果问题依然存在，请提供更多详细信息以便进一步诊断。</p><p>4o</p><p>ChatGPT:</p><ul><li><code>#include &lt;jni.h&gt;</code>错误通常意味着系统找不到Java Native Interface (JNI)的头文件。对于macOS上的M1设备，你需要确保Java开发工具包（JDK）正确安装，并且配置文件路径以便编译器能找到这些头文件。</li></ul><p>以下是解决这个问题的步骤：</p><h3 id="_1-安装jdk-1" tabindex="-1"><a class="header-anchor" href="#_1-安装jdk-1"><span>1. 安装JDK</span></a></h3><p>如果你还没有安装JDK，可以使用Homebrew安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> openjdk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-查找jdk路径-1" tabindex="-1"><a class="header-anchor" href="#_2-查找jdk路径-1"><span>2. 查找JDK路径</span></a></h3><p>使用以下命令查找JDK的安装路径：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/usr/libexec/java_home
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将返回JDK的根目录，例如：<code>/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home</code></p><h3 id="_3-更新makefile-1" tabindex="-1"><a class="header-anchor" href="#_3-更新makefile-1"><span>3. 更新Makefile</span></a></h3><p>你需要在Makefile中指定JNI头文件的路径。在Makefile中添加包含路径和库路径：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JDKDIR <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> /usr/libexec/java_home<span class="token punctuation">)</span>

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JDKDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JDKDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span>/darwin -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-编译项目-1" tabindex="-1"><a class="header-anchor" href="#_4-编译项目-1"><span>4. 编译项目</span></a></h3><p>运行以下命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证头文件路径-1" tabindex="-1"><a class="header-anchor" href="#验证头文件路径-1"><span>验证头文件路径</span></a></h3><p>确保路径正确，验证头文件是否存在。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token variable"><span class="token variable">$(</span>JDKDIR<span class="token variable">)</span></span>/include/jni.h
<span class="token function">ls</span> <span class="token variable"><span class="token variable">$(</span>JDKDIR<span class="token variable">)</span></span>/include/darwin/jni_md.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果文件存在且路径正确，编译器应该能够找到它们。</p><h3 id="如果仍有问题-1" tabindex="-1"><a class="header-anchor" href="#如果仍有问题-1"><span>如果仍有问题</span></a></h3><ol><li><strong>确保JDK正确安装</strong> ：<br> 确保你安装的是正确版本的JDK，并且系统环境变量已正确配置。</li><li><strong>检查环境变量</strong> ：<br> 确保<code>JAVA_HOME</code>环境变量已正确设置，可以在终端中执行以下命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$JAVA_HOME</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有输出，或者输出错误路径，设置<code>JAVA_HOME</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>/usr/libexec/java_home<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并将其添加到你的shell配置文件（例如<code>.zshrc</code>或<code>.bashrc</code>）中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;export JAVA_HOME=$(/usr/libexec/java_home)&#39;</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc
<span class="token builtin class-name">source</span> ~/.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>希望这些步骤能帮助你解决编译错误。如果问题依然存在，请提供更多详细信息以便进一步诊断。</p><p>You:</p><ul><li>我想把#include &lt;jni.h&gt;安装到我的项目目录下面可以吗？</li></ul><p>ChatGPT:</p><ul><li>我想把#include &lt;jni.h&gt;安装到我的项目目录下面可以吗？</li></ul><p>You:</p><ul><li>是的，你可以将<code>jni.h</code>头文件安装到你的项目目录下并配置你的编译器来查找这些文件。下面是一个具体的步骤来实现这一点。</li></ul><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤：</span></a></h3><ol><li><strong>下载和复制JNI头文件</strong></li></ol><p>如果你已经安装了JDK，你可以复制所需的JNI头文件到你的项目目录下。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /path/to/your/project/lib/jni
<span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span>/usr/libexec/java_home<span class="token variable">)</span></span>/include/jni.h /path/to/your/project/lib/jni/
<span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span>/usr/libexec/java_home<span class="token variable">)</span></span>/include/darwin/jni_md.h /path/to/your/project/lib/jni/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将创建一个名为<code>lib/jni</code>的目录并将<code>jni.h</code>和<code>jni_md.h</code>文件复制到该目录中。<br> 2. <strong>更新Makefile</strong></p><p>更新你的Makefile以包含新的JNI头文件路径。</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JNIDIR <span class="token operator">:=</span> lib/jni

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JNIDIR<span class="token punctuation">)</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>编译项目</strong></li></ol><p>在项目目录中运行以下命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证" tabindex="-1"><a class="header-anchor" href="#验证"><span>验证</span></a></h3><p>确保文件被正确复制和包含路径正确。如果在编译过程中仍然遇到<code>#include &lt;jni.h&gt;</code>错误，检查文件是否正确复制，并且确保Makefile中包含路径设置无误。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>假设你的项目目录结构如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>openWakeWord-cpp
├── LICENSE.md
├── Makefile
├── README.md
├── build
├── lib
│   ├── arm64
│   │   ├── include
│   │   └── lib
│   └── jni
│       ├── jni.h
│       └── jni_md.h
├── models
│   ├── alexa_v0.1.onnx
│   ├── embedding_model.onnx
│   ├── hey_jarvis_v0.1.onnx
│   ├── hey_marvin_v0.1.onnx
│   ├── hey_mycroft_v0.1.onnx
│   └── melspectrogram.onnx
├── openWakeWord-cpp.iml
└── src
    ├── CMakeLists.txt
    ├── android
    ├── main.cpp
    └── main.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="makefile配置" tabindex="-1"><a class="header-anchor" href="#makefile配置"><span>Makefile配置</span></a></h3><p>确保Makefile中的路径配置正确：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JNIDIR <span class="token operator">:=</span> lib/jni

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JNIDIR<span class="token punctuation">)</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，<code>jni.h</code>文件会在编译时被正确包含，从而避免缺少JNI头文件的错误。</p><p>4o</p><p>ChatGPT:</p><ul><li>是的，你可以将<code>jni.h</code>头文件安装到你的项目目录下并配置你的编译器来查找这些文件。下面是一个具体的步骤来实现这一点。</li></ul><h3 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1"><span>步骤：</span></a></h3><ol><li><strong>下载和复制JNI头文件</strong></li></ol><p>如果你已经安装了JDK，你可以复制所需的JNI头文件到你的项目目录下。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /path/to/your/project/lib/jni
<span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span>/usr/libexec/java_home<span class="token variable">)</span></span>/include/jni.h /path/to/your/project/lib/jni/
<span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span>/usr/libexec/java_home<span class="token variable">)</span></span>/include/darwin/jni_md.h /path/to/your/project/lib/jni/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将创建一个名为<code>lib/jni</code>的目录并将<code>jni.h</code>和<code>jni_md.h</code>文件复制到该目录中。<br> 2. <strong>更新Makefile</strong></p><p>更新你的Makefile以包含新的JNI头文件路径。</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JNIDIR <span class="token operator">:=</span> lib/jni

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JNIDIR<span class="token punctuation">)</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>编译项目</strong></li></ol><p>在项目目录中运行以下命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证-1" tabindex="-1"><a class="header-anchor" href="#验证-1"><span>验证</span></a></h3><p>确保文件被正确复制和包含路径正确。如果在编译过程中仍然遇到<code>#include &lt;jni.h&gt;</code>错误，检查文件是否正确复制，并且确保Makefile中包含路径设置无误。</p><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><p>假设你的项目目录结构如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>openWakeWord-cpp
├── LICENSE.md
├── Makefile
├── README.md
├── build
├── lib
│   ├── arm64
│   │   ├── include
│   │   └── lib
│   └── jni
│       ├── jni.h
│       └── jni_md.h
├── models
│   ├── alexa_v0.1.onnx
│   ├── embedding_model.onnx
│   ├── hey_jarvis_v0.1.onnx
│   ├── hey_marvin_v0.1.onnx
│   ├── hey_mycroft_v0.1.onnx
│   └── melspectrogram.onnx
├── openWakeWord-cpp.iml
└── src
    ├── CMakeLists.txt
    ├── android
    ├── main.cpp
    └── main.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="makefile配置-1" tabindex="-1"><a class="header-anchor" href="#makefile配置-1"><span>Makefile配置</span></a></h3><p>确保Makefile中的路径配置正确：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JNIDIR <span class="token operator">:=</span> lib/jni

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JNIDIR<span class="token punctuation">)</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，<code>jni.h</code>文件会在编译时被正确包含，从而避免缺少JNI头文件的错误。</p><p>You:</p><ul><li>➜ openWakeWord-cpp git:(AndroidImplementation) ✗ find /opt/homebrew/Cellar/openjdk -name jni.h<br> /opt/homebrew/Cellar/openjdk/21.0.3/libexec/openjdk.jdk/Contents/Home/include/jni.h<br> /opt/homebrew/Cellar/openjdk/21.0.3/include/jni.h</li></ul><p>ChatGPT:</p><ul><li>➜ openWakeWord-cpp git:(AndroidImplementation) ✗ find /opt/homebrew/Cellar/openjdk -name jni.h<br> /opt/homebrew/Cellar/openjdk/21.0.3/libexec/openjdk.jdk/Contents/Home/include/jni.h<br> /opt/homebrew/Cellar/openjdk/21.0.3/include/jni.h</li></ul><p>You:</p><ul><li>好的，既然你已经找到<code>jni.h</code>的路径，我们可以按照之前的计划将<code>jni.h</code>和相关文件复制到项目目录下，并更新Makefile。</li></ul><h3 id="_1-复制jni头文件" tabindex="-1"><a class="header-anchor" href="#_1-复制jni头文件"><span>1. 复制JNI头文件</span></a></h3><p>将<code>jni.h</code>和<code>jni_md.h</code>文件复制到项目目录下的<code>lib/jni</code>目录中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /path/to/your/project/lib/jni
<span class="token function">cp</span> /opt/homebrew/Cellar/openjdk/21.0.3/libexec/openjdk.jdk/Contents/Home/include/jni.h /path/to/your/project/lib/jni/
<span class="token function">cp</span> /opt/homebrew/Cellar/openjdk/21.0.3/libexec/openjdk.jdk/Contents/Home/include/darwin/jni_md.h /path/to/your/project/lib/jni/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-更新makefile" tabindex="-1"><a class="header-anchor" href="#_2-更新makefile"><span>2. 更新Makefile</span></a></h3><p>在Makefile中添加JNI头文件路径：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JNIDIR <span class="token operator">:=</span> lib/jni

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JNIDIR<span class="token punctuation">)</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-编译项目" tabindex="-1"><a class="header-anchor" href="#_3-编译项目"><span>3. 编译项目</span></a></h3><p>在项目目录中运行以下命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证-2" tabindex="-1"><a class="header-anchor" href="#验证-2"><span>验证</span></a></h3><p>确保文件被正确复制，并且路径设置无误。如果在编译过程中仍然遇到<code>#include &lt;jni.h&gt;</code>错误，请检查文件是否正确复制，并确认Makefile中包含路径设置正确。</p><h3 id="示例目录结构" tabindex="-1"><a class="header-anchor" href="#示例目录结构"><span>示例目录结构</span></a></h3><p>假设你的项目目录结构如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>openWakeWord-cpp
├── LICENSE.md
├── Makefile
├── README.md
├── build
├── lib
│   ├── arm64
│   │   ├── include
│   │   └── lib
│   └── jni
│       ├── jni.h
│       └── jni_md.h
├── models
│   ├── alexa_v0.1.onnx
│   ├── embedding_model.onnx
│   ├── hey_jarvis_v0.1.onnx
│   ├── hey_marvin_v0.1.onnx
│   ├── hey_mycroft_v0.1.onnx
│   └── melspectrogram.onnx
├── openWakeWord-cpp.iml
└── src
    ├── CMakeLists.txt
    ├── android
    ├── main.cpp
    └── main.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Makefile中，确保<code>JNIDIR</code>路径设置正确：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JNIDIR <span class="token operator">:=</span> lib/jni

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JNIDIR<span class="token punctuation">)</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，你的项目应该可以在M1 Mac上编译和运行。</p><p>4o</p><p>ChatGPT:</p><ul><li>好的，既然你已经找到<code>jni.h</code>的路径，我们可以按照之前的计划将<code>jni.h</code>和相关文件复制到项目目录下，并更新Makefile。</li></ul><h3 id="_1-复制jni头文件-1" tabindex="-1"><a class="header-anchor" href="#_1-复制jni头文件-1"><span>1. 复制JNI头文件</span></a></h3><p>将<code>jni.h</code>和<code>jni_md.h</code>文件复制到项目目录下的<code>lib/jni</code>目录中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /path/to/your/project/lib/jni
<span class="token function">cp</span> /opt/homebrew/Cellar/openjdk/21.0.3/libexec/openjdk.jdk/Contents/Home/include/jni.h /path/to/your/project/lib/jni/
<span class="token function">cp</span> /opt/homebrew/Cellar/openjdk/21.0.3/libexec/openjdk.jdk/Contents/Home/include/darwin/jni_md.h /path/to/your/project/lib/jni/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-更新makefile-1" tabindex="-1"><a class="header-anchor" href="#_2-更新makefile-1"><span>2. 更新Makefile</span></a></h3><p>在Makefile中添加JNI头文件路径：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JNIDIR <span class="token operator">:=</span> lib/jni

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JNIDIR<span class="token punctuation">)</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-编译项目-1" tabindex="-1"><a class="header-anchor" href="#_3-编译项目-1"><span>3. 编译项目</span></a></h3><p>在项目目录中运行以下命令进行编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="验证-3" tabindex="-1"><a class="header-anchor" href="#验证-3"><span>验证</span></a></h3><p>确保文件被正确复制，并且路径设置无误。如果在编译过程中仍然遇到<code>#include &lt;jni.h&gt;</code>错误，请检查文件是否正确复制，并确认Makefile中包含路径设置正确。</p><h3 id="示例目录结构-1" tabindex="-1"><a class="header-anchor" href="#示例目录结构-1"><span>示例目录结构</span></a></h3><p>假设你的项目目录结构如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>openWakeWord-cpp
├── LICENSE.md
├── Makefile
├── README.md
├── build
├── lib
│   ├── arm64
│   │   ├── include
│   │   └── lib
│   └── jni
│       ├── jni.h
│       └── jni_md.h
├── models
│   ├── alexa_v0.1.onnx
│   ├── embedding_model.onnx
│   ├── hey_jarvis_v0.1.onnx
│   ├── hey_marvin_v0.1.onnx
│   ├── hey_mycroft_v0.1.onnx
│   └── melspectrogram.onnx
├── openWakeWord-cpp.iml
└── src
    ├── CMakeLists.txt
    ├── android
    ├── main.cpp
    └── main.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Makefile中，确保<code>JNIDIR</code>路径设置正确：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> release debug clean

ARCH <span class="token operator">:=</span> arm64
ONNXDIR <span class="token operator">:=</span> lib/<span class="token variable">$</span><span class="token punctuation">(</span>ARCH<span class="token punctuation">)</span>
JNIDIR <span class="token operator">:=</span> lib/jni

<span class="token target symbol">release</span><span class="token punctuation">:</span>
    mkdir -p build
    g++ -o build/openwakeword -I<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/<span class="token keyword">include</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>JNIDIR<span class="token punctuation">)</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib -O2 -std<span class="token operator">=</span>c++20 -Wall -Wextra -Wl,-rpath,<span class="token string">&#39;$ORIGIN&#39;</span> src/main.cpp -lpthread -lonnxruntime
    cp -a <span class="token variable">$</span><span class="token punctuation">(</span>ONNXDIR<span class="token punctuation">)</span>/lib/* build/

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm -rf build/ dist/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，你的项目应该可以在M1 Mac上编译和运行。</p>`,175);function ns(ss,as){const a=i("ExternalLinkIcon");return p(),o("div",null,[u,n("ul",null,[n("li",null,[s("我在运行一个基于深度学习的语音唤醒项目，这是他的项目地址："),n("a",r,[s("https://github.com/ObscurusGrassator/openWakeWord-cpp"),e(a)]),d,s(" 我使用的设备是m1的mac，我现在想问问运行报错的原因是什么？"),m,s(" ➜ openWakeWord-cpp git:(AndroidImplementation) ✗ make"),k,s(" mkdir -p build"),v,s(" g++ -o build/openwakeword -Ilib/arm64/include -Llib/arm64/lib -O2 -std=c++20 -Wall -Wextra -Wl,-rpath,'$ORIGIN' src/main.cpp -lpthread -lonnxruntime"),b,s(" src/main.cpp:12:10: fatal error: 'onnxruntime_cxx_api.h' file not found"),h,s(" #include <onnxruntime_cxx_api.h>"),g,s(" ^~~~~~~~~~~~~~~~~~~~~~~"),_,s(" 1 error generated."),f,s(" make: *** [release] Error 1"),x,s(" ➜ openWakeWord-cpp git:(AndroidImplementation) ✗")])]),N,n("ul",null,[n("li",null,[s("我在运行一个基于深度学习的语音唤醒项目，这是他的项目地址："),n("a",y,[s("https://github.com/ObscurusGrassator/openWakeWord-cpp"),e(a)]),O,s(" 我使用的设备是m1的mac，我现在想问问运行报错的原因是什么？"),I,s(" ➜ openWakeWord-cpp git:(AndroidImplementation) ✗ make"),R,s(" mkdir -p build"),w,s(" g++ -o build/openwakeword -Ilib/arm64/include -Llib/arm64/lib -O2 -std=c++20 -Wall -Wextra -Wl,-rpath,'$ORIGIN' src/main.cpp -lpthread -lonnxruntime"),X,s(" src/main.cpp:12:10: fatal error: 'onnxruntime_cxx_api.h' file not found"),D,s(" #include <onnxruntime_cxx_api.h>"),C,s(" ^~~~~~~~~~~~~~~~~~~~~~~"),A,s(" 1 error generated."),j,s(" make: *** [release] Error 1"),$,s(" ➜ openWakeWord-cpp git:(AndroidImplementation) ✗")])]),W,n("ul",null,[n("li",null,[s("前往"),n("a",M,[s("ONNX Runtime的官方GitHub仓库"),e(a)]),s(" 。")]),G]),S,n("ul",null,[n("li",null,[s("前往"),n("a",L,[s("ONNX Runtime的官方GitHub仓库"),e(a)]),s(" 。")]),T]),E,n("ul",null,[n("li",null,[s("这是我的项目目录结构，请问这下面的onnx文件是干嘛的？怎么使用"),J,s(" ➜ openWakeWord-cpp git:(AndroidImplementation) ✗ tree -L 2"),H,s(" openWakeWord-cpp"),z,s(" ├── "),n("a",P,[s("LICENSE.md"),e(a)]),K,s(" ├── Makefile"),q,s(" ├── "),n("a",Y,[s("README.md"),e(a)]),V,s(" ├── build"),F,s(" ├── models"),U,s(" │ ├── alexa_v0.1.onnx"),B,s(" │ ├── embedding_model.onnx"),Z,s(" │ ├── hey_jarvis_v0.1.onnx"),Q,s(" │ ├── hey_marvin_v0.1.onnx"),nn,s(" │ ├── hey_mycroft_v0.1.onnx"),sn,s(" │ └── melspectrogram.onnx"),an,s(" ├── openWakeWord-cpp.iml"),en,s(" └── src"),tn,s(" ├── CMakeLists.txt"),ln,s(" ├── android"),pn,s(" ├── main.cpp"),on,s(" └── main.h")])]),cn,n("ul",null,[n("li",null,[s("这是我的项目目录结构，请问这下面的onnx文件是干嘛的？怎么使用"),un,s(" ➜ openWakeWord-cpp git:(AndroidImplementation) ✗ tree -L 2"),rn,s(" openWakeWord-cpp"),dn,s(" ├── "),n("a",mn,[s("LICENSE.md"),e(a)]),kn,s(" ├── Makefile"),vn,s(" ├── "),n("a",bn,[s("README.md"),e(a)]),hn,s(" ├── build"),gn,s(" ├── models"),_n,s(" │ ├── alexa_v0.1.onnx"),fn,s(" │ ├── embedding_model.onnx"),xn,s(" │ ├── hey_jarvis_v0.1.onnx"),Nn,s(" │ ├── hey_marvin_v0.1.onnx"),yn,s(" │ ├── hey_mycroft_v0.1.onnx"),On,s(" │ └── melspectrogram.onnx"),In,s(" ├── openWakeWord-cpp.iml"),Rn,s(" └── src"),wn,s(" ├── CMakeLists.txt"),Xn,s(" ├── android"),Dn,s(" ├── main.cpp"),Cn,s(" └── main.h")])]),An,n("p",null,[s("前往"),n("a",jn,[s("ONNX Runtime的GitHub仓库"),e(a)]),s(" 并下载适合macOS的预编译库，或自行编译。"),$n,s(" 2. "),Wn,s(" :")]),Mn,n("p",null,[s("前往"),n("a",Gn,[s("ONNX Runtime的GitHub仓库"),e(a)]),s(" 并下载适合macOS的预编译库，或自行编译。"),Sn,s(" 2. "),Ln,s(" :")]),Tn,En,Jn,Hn,zn,Pn,Kn,qn,Yn,Vn,n("ul",null,[n("li",null,[s("➜ openWakeWord-cpp git:(AndroidImplementation) wget "),n("a",Fn,[s("https://github.com/microsoft/onnxruntime/releases/download/v1.17.3/onnxruntime-osx-arm64-1.17.3.tgz"),e(a)])])]),Un,Bn,n("ul",null,[n("li",null,[s("➜ openWakeWord-cpp git:(AndroidImplementation) wget "),n("a",Zn,[s("https://github.com/microsoft/onnxruntime/releases/download/v1.17.3/onnxruntime-osx-arm64-1.17.3.tgz"),e(a)])])]),Qn])}const ls=l(c,[["render",ns],["__file","test.html.vue"]]),is=JSON.parse(`{"path":"/project/test.html","title":"运行深度学习语音项目","lang":"zh-CN","frontmatter":{"title":"运行深度学习语音项目","icon":"article","date":"2023-04-01T22:56:16.000Z","category":["项目实战"],"tag":["authset"],"description":"You: 我在运行一个基于深度学习的语音唤醒项目，这是他的项目地址：https://github.com/ObscurusGrassator/openWakeWord-cpp 我使用的设备是m1的mac，我现在想问问运行报错的原因是什么？ ➜ openWakeWord-cpp git:(AndroidImplementation) ✗ make mkd...","head":[["meta",{"property":"og:url","content":"https://jiejaitt.tech/project/test.html"}],["meta",{"property":"og:title","content":"运行深度学习语音项目"}],["meta",{"property":"og:description","content":"You: 我在运行一个基于深度学习的语音唤醒项目，这是他的项目地址：https://github.com/ObscurusGrassator/openWakeWord-cpp 我使用的设备是m1的mac，我现在想问问运行报错的原因是什么？ ➜ openWakeWord-cpp git:(AndroidImplementation) ✗ make mkd..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://files.oaiusercontent.com/file-VKu8bczysP0lVIPN4AW3D996?se=2024-05-18T16%3A19%3A20Z&sp=r&sv=2023-11-03&sr=b&rscc=max-age%3D299%2C%20immutable&rscd=attachment%3B%20filename%3Dimage.png&sig=gaKIG1KXyTAfDOSuSuXVTRABQ8DDsx9OQFCK2LWit1Y%3D"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-19T05:51:48.000Z"}],["meta",{"property":"article:author","content":"JIeJaitt"}],["meta",{"property":"article:tag","content":"authset"}],["meta",{"property":"article:published_time","content":"2023-04-01T22:56:16.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-19T05:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"运行深度学习语音项目\\",\\"image\\":[\\"https://files.oaiusercontent.com/file-VKu8bczysP0lVIPN4AW3D996?se=2024-05-18T16%3A19%3A20Z&sp=r&sv=2023-11-03&sr=b&rscc=max-age%3D299%2C%20immutable&rscd=attachment%3B%20filename%3Dimage.png&sig=gaKIG1KXyTAfDOSuSuXVTRABQ8DDsx9OQFCK2LWit1Y%3D\\",\\"https://files.oaiusercontent.com/file-VKu8bczysP0lVIPN4AW3D996?se=2024-05-18T16%3A19%3A20Z&sp=r&sv=2023-11-03&sr=b&rscc=max-age%3D299%2C%20immutable&rscd=attachment%3B%20filename%3Dimage.png&sig=gaKIG1KXyTAfDOSuSuXVTRABQ8DDsx9OQFCK2LWit1Y%3D\\",\\"https://files.oaiusercontent.com/file-l2v5lmfONkm2Lu5SNkGWwXyp?se=2024-05-18T16%3A24%3A42Z&sp=r&sv=2023-11-03&sr=b&rscc=max-age%3D299%2C%20immutable&rscd=attachment%3B%20filename%3Dimage.png&sig=tAwU2Yf5z6bC4zEzk4PURmEh6aEkk5Fe2iMlnfTHND4%3D\\",\\"https://files.oaiusercontent.com/file-l2v5lmfONkm2Lu5SNkGWwXyp?se=2024-05-18T16%3A24%3A42Z&sp=r&sv=2023-11-03&sr=b&rscc=max-age%3D299%2C%20immutable&rscd=attachment%3B%20filename%3Dimage.png&sig=tAwU2Yf5z6bC4zEzk4PURmEh6aEkk5Fe2iMlnfTHND4%3D\\"],\\"datePublished\\":\\"2023-04-01T22:56:16.000Z\\",\\"dateModified\\":\\"2024-05-19T05:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JIeJaitt\\",\\"url\\":\\"https://jiejaitt.tech\\"}]}"]]},"headers":[{"level":3,"title":"使用ONNX模型的步骤","slug":"使用onnx模型的步骤","link":"#使用onnx模型的步骤","children":[]},{"level":3,"title":"具体代码示例","slug":"具体代码示例","link":"#具体代码示例","children":[]},{"level":3,"title":"解决当前报错的方法","slug":"解决当前报错的方法","link":"#解决当前报错的方法","children":[]},{"level":3,"title":"使用ONNX模型的步骤","slug":"使用onnx模型的步骤-1","link":"#使用onnx模型的步骤-1","children":[]},{"level":3,"title":"具体代码示例","slug":"具体代码示例-1","link":"#具体代码示例-1","children":[]},{"level":3,"title":"解决当前报错的方法","slug":"解决当前报错的方法-1","link":"#解决当前报错的方法-1","children":[]},{"level":3,"title":"验证路径","slug":"验证路径","link":"#验证路径","children":[]},{"level":3,"title":"示例代码调整","slug":"示例代码调整","link":"#示例代码调整","children":[]},{"level":3,"title":"验证路径","slug":"验证路径-1","link":"#验证路径-1","children":[]},{"level":3,"title":"示例代码调整","slug":"示例代码调整-1","link":"#示例代码调整-1","children":[]},{"level":3,"title":"检查ONNX Runtime安装路径","slug":"检查onnx-runtime安装路径","link":"#检查onnx-runtime安装路径","children":[]},{"level":3,"title":"设置正确的头文件和库文件路径","slug":"设置正确的头文件和库文件路径","link":"#设置正确的头文件和库文件路径","children":[]},{"level":3,"title":"手动下载和配置ONNX Runtime","slug":"手动下载和配置onnx-runtime","link":"#手动下载和配置onnx-runtime","children":[]},{"level":3,"title":"验证安装","slug":"验证安装","link":"#验证安装","children":[]},{"level":3,"title":"检查ONNX Runtime安装路径","slug":"检查onnx-runtime安装路径-1","link":"#检查onnx-runtime安装路径-1","children":[]},{"level":3,"title":"设置正确的头文件和库文件路径","slug":"设置正确的头文件和库文件路径-1","link":"#设置正确的头文件和库文件路径-1","children":[]},{"level":3,"title":"手动下载和配置ONNX Runtime","slug":"手动下载和配置onnx-runtime-1","link":"#手动下载和配置onnx-runtime-1","children":[]},{"level":3,"title":"验证安装","slug":"验证安装-1","link":"#验证安装-1","children":[]},{"level":3,"title":"选择适用的ONNX Runtime版本","slug":"选择适用的onnx-runtime版本","link":"#选择适用的onnx-runtime版本","children":[]},{"level":3,"title":"修改Makefile","slug":"修改makefile","link":"#修改makefile","children":[]},{"level":3,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]},{"level":3,"title":"编译和运行","slug":"编译和运行","link":"#编译和运行","children":[]},{"level":3,"title":"验证编译","slug":"验证编译","link":"#验证编译","children":[]},{"level":3,"title":"选择适用的ONNX Runtime版本","slug":"选择适用的onnx-runtime版本-1","link":"#选择适用的onnx-runtime版本-1","children":[]},{"level":3,"title":"修改Makefile","slug":"修改makefile-1","link":"#修改makefile-1","children":[]},{"level":3,"title":"目录结构","slug":"目录结构-1","link":"#目录结构-1","children":[]},{"level":3,"title":"编译和运行","slug":"编译和运行-1","link":"#编译和运行-1","children":[]},{"level":3,"title":"验证编译","slug":"验证编译-1","link":"#验证编译-1","children":[]},{"level":3,"title":"1. 安装JDK","slug":"_1-安装jdk","link":"#_1-安装jdk","children":[]},{"level":3,"title":"2. 查找JDK路径","slug":"_2-查找jdk路径","link":"#_2-查找jdk路径","children":[]},{"level":3,"title":"3. 更新Makefile","slug":"_3-更新makefile","link":"#_3-更新makefile","children":[]},{"level":3,"title":"4. 编译项目","slug":"_4-编译项目","link":"#_4-编译项目","children":[]},{"level":3,"title":"验证头文件路径","slug":"验证头文件路径","link":"#验证头文件路径","children":[]},{"level":3,"title":"如果仍有问题","slug":"如果仍有问题","link":"#如果仍有问题","children":[]},{"level":3,"title":"1. 安装JDK","slug":"_1-安装jdk-1","link":"#_1-安装jdk-1","children":[]},{"level":3,"title":"2. 查找JDK路径","slug":"_2-查找jdk路径-1","link":"#_2-查找jdk路径-1","children":[]},{"level":3,"title":"3. 更新Makefile","slug":"_3-更新makefile-1","link":"#_3-更新makefile-1","children":[]},{"level":3,"title":"4. 编译项目","slug":"_4-编译项目-1","link":"#_4-编译项目-1","children":[]},{"level":3,"title":"验证头文件路径","slug":"验证头文件路径-1","link":"#验证头文件路径-1","children":[]},{"level":3,"title":"如果仍有问题","slug":"如果仍有问题-1","link":"#如果仍有问题-1","children":[]},{"level":3,"title":"步骤：","slug":"步骤","link":"#步骤","children":[]},{"level":3,"title":"验证","slug":"验证","link":"#验证","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"Makefile配置","slug":"makefile配置","link":"#makefile配置","children":[]},{"level":3,"title":"步骤：","slug":"步骤-1","link":"#步骤-1","children":[]},{"level":3,"title":"验证","slug":"验证-1","link":"#验证-1","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"Makefile配置","slug":"makefile配置-1","link":"#makefile配置-1","children":[]},{"level":3,"title":"1. 复制JNI头文件","slug":"_1-复制jni头文件","link":"#_1-复制jni头文件","children":[]},{"level":3,"title":"2. 更新Makefile","slug":"_2-更新makefile","link":"#_2-更新makefile","children":[]},{"level":3,"title":"3. 编译项目","slug":"_3-编译项目","link":"#_3-编译项目","children":[]},{"level":3,"title":"验证","slug":"验证-2","link":"#验证-2","children":[]},{"level":3,"title":"示例目录结构","slug":"示例目录结构","link":"#示例目录结构","children":[]},{"level":3,"title":"1. 复制JNI头文件","slug":"_1-复制jni头文件-1","link":"#_1-复制jni头文件-1","children":[]},{"level":3,"title":"2. 更新Makefile","slug":"_2-更新makefile-1","link":"#_2-更新makefile-1","children":[]},{"level":3,"title":"3. 编译项目","slug":"_3-编译项目-1","link":"#_3-编译项目-1","children":[]},{"level":3,"title":"验证","slug":"验证-3","link":"#验证-3","children":[]},{"level":3,"title":"示例目录结构","slug":"示例目录结构-1","link":"#示例目录结构-1","children":[]}],"git":{"createdTime":1685982478000,"updatedTime":1716097908000,"contributors":[{"name":"JIeJaitt","email":"498938874@qq.com","commits":4}]},"readingTime":{"minutes":31.19,"words":9358},"filePathRelative":"project/test.md","localizedDate":"2023年4月1日","excerpt":"<p>You:</p>\\n<ul>\\n<li>我在运行一个基于深度学习的语音唤醒项目，这是他的项目地址：<a href=\\"https://github.com/ObscurusGrassator/openWakeWord-cpp\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/ObscurusGrassator/openWakeWord-cpp</a><br>\\n我使用的设备是m1的mac，我现在想问问运行报错的原因是什么？<br>\\n➜  openWakeWord-cpp git:(AndroidImplementation) ✗ make<br>\\nmkdir -p build<br>\\ng++ -o build/openwakeword -Ilib/arm64/include -Llib/arm64/lib -O2 -std=c++20 -Wall -Wextra -Wl,-rpath,'$ORIGIN' src/main.cpp -lpthread -lonnxruntime<br>\\nsrc/main.cpp:12:10: fatal error: 'onnxruntime_cxx_api.h' file not found<br>\\n#include &lt;onnxruntime_cxx_api.h&gt;<br>\\n^~~~~~~~~~~~~~~~~~~~~~~<br>\\n1 error generated.<br>\\nmake: *** [release] Error 1<br>\\n➜  openWakeWord-cpp git:(AndroidImplementation) ✗</li>\\n</ul>","autoDesc":true}`);export{ls as comp,is as data};
