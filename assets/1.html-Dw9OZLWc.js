import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as t,a as s,b as o,d as l,e as c}from"./app-BORy5ehh.js";const r={},i=c(`<p>当多个用户访问同一数据时，一个用户在更改数据的过程中可能有其它用户同时发起更改请求，为保证数据的一致性状态，MySQL 引入了事务。</p><p>本文首先介绍了事务控制语句和隔离级别，然后介绍了字符集和校对规则的相关概念和操作。</p><h2 id="为什么说一定要开启事务后才能对数据进行操作" tabindex="-1"><a class="header-anchor" href="#为什么说一定要开启事务后才能对数据进行操作"><span>为什么说一定要开启事务后才能对数据进行操作？</span></a></h2><p>在银行业务中，有一条记账原则，即有借有贷，借贷相等。为了保证这种原则，每发生一笔银行业务，就必须确保会计账目上借方科目和贷方科目至少各记一笔，并且这两笔账要么同时成功，要么同时失败。如果出现只记录了借方科目，或者只记录了贷方科目的情况，就违反了记账原则。会出现记错账的情况。</p><p>在银行的日常业务中，只要是同一银行（如都是中国农业银行，简称农行），一般都支持账户间的直接转账。因此，银行转账操作往往会涉及两个或两个以上的账户。在转出账户的存款减少一定金额的同时，转入账户的存款就要增加相应的金额。</p><p>下面，在 MySQL 数据库中模拟一下上述提及的转账问题。</p><p>假如要从张三的账户直接转账 500 元到李四的账户。首先需要创建账户表，存放用户张三和李四的账户信息。创建账户表和插入数据的 SQL 语句和运行结果如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mybank<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">USE</span> mybank<span class="token punctuation">;</span>
<span class="token keyword">Database</span> changed
mysql<span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> bank<span class="token punctuation">(</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> customerName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">#用户名</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> currentMoney <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">#当前余额</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.26</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> bank <span class="token punctuation">(</span>customerName<span class="token punctuation">,</span>currentMoney<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.07</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> bank <span class="token punctuation">(</span>customerName<span class="token punctuation">,</span>currentMoney<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.08</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询 bank 数据表的 SQL 语句和运行结果如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> bank<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token operator">|</span> customerName <span class="token operator">|</span> currentMoney <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token operator">|</span> 张三         <span class="token operator">|</span>      <span class="token number">1000.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> 李四         <span class="token operator">|</span>         <span class="token number">1.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果显示，张三和李四两个账户的余额总和为 1000+1=1001 元。</p><p>下面开始模拟实现转账功能。从张三的账户直接转账 500 元到李四的账户，可以使用 UPDATE 语句分别修改张三的账户和李四的账户。张三的账户减少 500 元，李四的账户增加 500 元， SQL 语句如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/*转账测试：张三转账给李四 500 元*/</span>
<span class="token comment"># 张三的账户少 500 元，李四的账户多 500 元</span>
<span class="token keyword">UPDATE</span> bank <span class="token keyword">SET</span> currentMoney <span class="token operator">=</span> currentMoney<span class="token operator">-</span><span class="token number">500</span> <span class="token keyword">WHERE</span> customerName <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> bank <span class="token keyword">SET</span> currentMoney <span class="token operator">=</span> currentMoney<span class="token operator">+</span><span class="token number">500</span> <span class="token keyword">WHERE</span> customerName <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常情况下，执行以上的转账操作后，余额总和应保持不变，仍为 1001 元。但是，如果在这个过程的其中一个环节出现差错，如在张三的账户减少 500 元之后，这时发生了服务器故障，李四的账户没有立即增加 500 元，此时，第三方读取到两个账户的余额总和变为 500+1=501 元，即账户总额间少了 500 元。</p><p>MySQL 为了解决此类问题，提供了事务。事务可以将一系列的数据操作捆绑成一个整体进行统一管理，如果某一事务执行成功，则在该事务中进行的所有数据更改均会提交，成为数据库中的永久组成部分。如果事务执行时遇到错误，则就必须取消或回滚。取消或回滚后，数据将全部恢复到操作前的状态，所有数据的更改均被清除。</p><p>MySQL 通过事务保证了数据的一致性。上述提到的转账过程就是一个事务，它需要两条 UPDATE 语句来完成。这两条语句是一个整体，如果其中任何一个环节出现问题，则整个转账业务也应取消，两个账户中的余额应恢复为原来的数据，从而确保转账前和转账后的余额总和不变，即都是 1001 元。</p><h2 id="数据库事务的概念和特性" tabindex="-1"><a class="header-anchor" href="#数据库事务的概念和特性"><span>数据库事务的概念和特性</span></a></h2><p>数据库的事务（Transaction）是一种机制、一个操作序列，包含了一组数据库操作命令。事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元。</p><p>在数据库系统上执行并发操作时，事务是作为最小的控制单元来使用的，特别适用于多用户同时操作的数据库系统。例如，航空公司的订票系统、银行、保险公司以及证券交易系统等。</p><p>事务具有 4 个特性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），这 4 个特性通常简称为 ACID。</p><ul><li>原子性：事务是一个完整的操作。事务的各元素是不可分的（原子的）。事务中的所有元素必须作为一个整体提交或回滚。如果事务中的任何元素失败，则整个事务将失败。以银行转账事务为例，如果该事务提交了，则这两个账户的数据将会更新。如果由于某种原因，事务在成功更新这两个账户之前终止了，则不会更新这两个账户的余额，并且会撤销对任何账户余额的修改，事务不能部分提交。</li><li>一致性：当事务完成时，数据必须处于一致状态。也就是说，在事务开始之前，数据库中存储的数据处于一致状态。在正在进行的事务中. 数据可能处于不一致的状态，如数据可能有部分被修改。然而，当事务成功完成时，数据必须再次回到已知的一致状态。通过事务对数据所做的修改不能损坏数据，或者说事务不能使数据存储处于不稳定的状态。以银行转账事务事务为例。在事务开始之前，所有账户余额的总额处于一致状态。在事务进行的过程中，一个账户余额减少了，而另一个账户余额尚未修改。因此，所有账户余额的总额处于不一致状态。事务完成以后，账户余额的总额再次恢复到一致状态。</li><li>隔离性：对数据进行修改的所有并发事务是彼此隔离的，这表明事务必须是独立的，它不应以任何方式依赖于或影响其他事务。修改数据的事务可以在另一个使用相同数据的事务开始之前访问这些数据，或者在另一个使用相同数据的事务结束之后访问这些数据。另外，当事务修改数据时，如果任何其他进程正在同时使用相同的数据，则直到该事务成功提交之后，对数据的修改才能生效。张三和李四之间的转账与王五和赵二之间的转账，永远是相互独立的。</li><li>持久性：事务的持久性指不管系统是否发生了故障，事务处理的结果都是永久的。一个事务成功完成之后，它对数据库所作的改变是永久性的，即使系统出现故障也是如此。也就是说，一旦事务被提交，事务对数据所做的任何变动都会被永久地保留在数据库中。事务的 ACID 原则保证了一个事务或者成功提交，或者失败回滚，二者必居其一。因此，它对事务的修改具有可恢复性。即当事务失败时，它对数据的修改都会恢复到该事务执行前的状态。</li></ul><h2 id="mysql执行事务的语法和流程" tabindex="-1"><a class="header-anchor" href="#mysql执行事务的语法和流程"><span>MySQL执行事务的语法和流程</span></a></h2><p>MySQL 提供了多种存储引擎来支持事务。支持事务的存储引擎有 InnoDB 和 BDB，其中，InnoDB 存储引擎事务主要通过 UNDO 日志和 REDO 日志实现，MyISAM 存储引擎不支持事务。</p><h2 id="mysql设置事务自动提交-开启和关闭" tabindex="-1"><a class="header-anchor" href="#mysql设置事务自动提交-开启和关闭"><span>MySQL设置事务自动提交（开启和关闭）</span></a></h2><p>MySQL 默认开启事务自动提交模式，即除非显式的开启事务（BEGIN 或 START TRANSACTION），否则每条 SOL 语句都会被当做一个单独的事务自动执行。但有些情况下，我们需要关闭事务自动提交来保证数据的一致性。下面主要介绍如何设置事务自动提交模式。</p><p>在 MySQL 中，可以通过 SHOW VARIABLES 语句查看当前事务自动提交模式，如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;autocommit&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token operator">|</span> autocommit    <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果显示，autocommit 的值是 ON，表示系统开启自动提交模式。</p><p>在 MySQL 中，可以使用 SET autocommit 语句设置事务的自动提交模式，语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token keyword">ON</span><span class="token operator">|</span><span class="token keyword">OFF</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对取值的说明：</p><ul><li>值为 0 和值为 OFF：关闭事务自动提交。如果关闭自动提交，用户将会一直处于某个事务中，只有提交或回滚后才会结束当前事务，重新开始一个新事务。</li><li>值为 1 和值为 ON：开启事务自动提交。如果开启自动提交，则每执行一条 SQL 语句，事务都会提交一次。</li></ul><p>示例<br> 下面我们关闭事务自动提交，模拟银行转账。</p><p>使用 SET autocommit 语句关闭事务自动提交，且张三转给李四 500 元，SQL 语句和运行结果如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                      <span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mybank<span class="token punctuation">.</span>bank<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token operator">|</span> customerName <span class="token operator">|</span> currentMoney <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token operator">|</span> 张三         <span class="token operator">|</span>      <span class="token number">1000.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> 李四         <span class="token operator">|</span>         <span class="token number">1.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">UPDATE</span> bank <span class="token keyword">SET</span> currentMoney <span class="token operator">=</span> currentMoney<span class="token operator">-</span><span class="token number">500</span> <span class="token keyword">WHERE</span> customerName<span class="token operator">=</span><span class="token string">&#39;张三&#39;</span> <span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
<span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">UPDATE</span> bank <span class="token keyword">SET</span> currentMoney <span class="token operator">=</span> currentMoney<span class="token operator">+</span><span class="token number">500</span> <span class="token keyword">WHERE</span> customerName<span class="token operator">=</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时重新打开一个 cmd 窗口，查看 bank 数据表中张三和李四的余额，SQL 语句和运行结果如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mybank<span class="token punctuation">.</span>bank<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token operator">|</span> customerName <span class="token operator">|</span> currentMoney <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token operator">|</span> 张三         <span class="token operator">|</span>      <span class="token number">1000.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> 李四         <span class="token operator">|</span>         <span class="token number">1.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果显示，张三和李四的余额是事务执行前的数据。</p><p>下面在之前的窗口中使用 COMMIT 语句提交事务，并查询 bank 数据表的数据，如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.07</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mybank<span class="token punctuation">.</span>bank<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token operator">|</span> customerName <span class="token operator">|</span> currentMoney <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token operator">|</span> 张三         <span class="token operator">|</span>       <span class="token number">500.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> 李四         <span class="token operator">|</span>       <span class="token number">501.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果显示，bank 数据表的数据更新成功。</p><p>在本例中，关闭自动提交后，该位置会作为一个事务起点，直到执行 COMMIT 语句和 ROLLBACK 语句后，该事务才结束。结束之后，这就是下一个事务的起点。</p><p>关闭自动提交功能后，只用当执行 COMMIT 命令后，MySQL 才将数据表中的资料提交到数据库中。如果执行 ROLLBACK 命令，数据将会被回滚。如果不提交事务，而终止 MySQL 会话，数据库将会自动执行回滚操作。</p><p>使用 BEGIN 或 START TRANSACTION 开启一个事务之后，自动提交将保持禁用状态，直到使用 COMMIT 或 ROLLBACK 结束事务。之后，自动提交模式会恢复到之前的状态，即如果 BEGIN 前 autocommit = 1，则完成本次事务后 autocommit 还是 1。如果 BEGIN 前 autocommit = 0，则完成本次事务后 autocommit 还是 0。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2>`,45),k={href:"http://c.biancheng.net/mysql/90/",target:"_blank",rel:"noopener noreferrer"};function u(d,m){const n=e("ExternalLinkIcon");return p(),t("div",null,[i,s("ul",null,[s("li",null,[s("a",k,[o("http://c.biancheng.net/mysql/90/"),l(n)])])])])}const y=a(r,[["render",u],["__file","1.html.vue"]]),w=JSON.parse('{"path":"/mysql/1.html","title":"保证数据的一致性状态的MySQL事务","lang":"zh-CN","frontmatter":{"title":"保证数据的一致性状态的MySQL事务","icon":"article","date":"2021-06-22T15:36:42.000Z","category":["数据","存储"],"tag":["MySQL"],"description":"当多个用户访问同一数据时，一个用户在更改数据的过程中可能有其它用户同时发起更改请求，为保证数据的一致性状态，MySQL 引入了事务。 本文首先介绍了事务控制语句和隔离级别，然后介绍了字符集和校对规则的相关概念和操作。","head":[["meta",{"property":"og:url","content":"https://jiejaitt.tech/mysql/1.html"}],["meta",{"property":"og:title","content":"保证数据的一致性状态的MySQL事务"}],["meta",{"property":"og:description","content":"当多个用户访问同一数据时，一个用户在更改数据的过程中可能有其它用户同时发起更改请求，为保证数据的一致性状态，MySQL 引入了事务。 本文首先介绍了事务控制语句和隔离级别，然后介绍了字符集和校对规则的相关概念和操作。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-22T09:20:20.000Z"}],["meta",{"property":"article:author","content":"JIeJaitt"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2021-06-22T15:36:42.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-22T09:20:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"保证数据的一致性状态的MySQL事务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-22T15:36:42.000Z\\",\\"dateModified\\":\\"2023-06-22T09:20:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JIeJaitt\\",\\"url\\":\\"https://jiejaitt.tech\\"}]}"]]},"headers":[{"level":2,"title":"为什么说一定要开启事务后才能对数据进行操作？","slug":"为什么说一定要开启事务后才能对数据进行操作","link":"#为什么说一定要开启事务后才能对数据进行操作","children":[]},{"level":2,"title":"数据库事务的概念和特性","slug":"数据库事务的概念和特性","link":"#数据库事务的概念和特性","children":[]},{"level":2,"title":"MySQL执行事务的语法和流程","slug":"mysql执行事务的语法和流程","link":"#mysql执行事务的语法和流程","children":[]},{"level":2,"title":"MySQL设置事务自动提交（开启和关闭）","slug":"mysql设置事务自动提交-开启和关闭","link":"#mysql设置事务自动提交-开启和关闭","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1687425620000,"updatedTime":1687425620000,"contributors":[{"name":"JIeJaitt","email":"498938874@qq.com","commits":1}]},"readingTime":{"minutes":9.95,"words":2984},"filePathRelative":"mysql/1.md","localizedDate":"2021年6月22日","excerpt":"<p>当多个用户访问同一数据时，一个用户在更改数据的过程中可能有其它用户同时发起更改请求，为保证数据的一致性状态，MySQL 引入了事务。</p>\\n<p>本文首先介绍了事务控制语句和隔离级别，然后介绍了字符集和校对规则的相关概念和操作。</p>\\n","autoDesc":true}');export{y as comp,w as data};
