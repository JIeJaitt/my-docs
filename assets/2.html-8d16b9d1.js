const e=JSON.parse('{"key":"v-696d9fb1","path":"/posts/apple/2.html","title":"Git如何帮助我们阅读开源项目以及我们如何参与开源项目","lang":"zh-CN","frontmatter":{"title":"Git如何帮助我们阅读开源项目以及我们如何参与开源项目","icon":"edit","date":"2022-01-02T00:00:00.000Z","category":["苹果"],"tag":["红","大","圆"],"description":"Git如何帮助我们阅读开源项目以及我们如何参与开源项目 阅读开源代码小技巧——Git历史记录快速翻页式签出 通过阅读源码来学习开源项目是最直接也最有效的方法。而想要了解一个开源项目，最好是从第一个 commit 开始看起，特别是第一个最小可用版本发布前的 commits, 通过阅读对每一次 commit 提交源码，能够最直接的理解作者的设计思路和开发过程中的思考。 在 GitHub 的 repository 页面上可以很方便的看到所有历史记录及其演进。不过，使用 IDE 或有跳转功能的编辑器来阅读会更方便。这就需要我们将代码仓 Clone 到本地。","head":[["meta",{"property":"og:url","content":"https://jiejaitt.tech/posts/apple/2.html"}],["meta",{"property":"og:title","content":"Git如何帮助我们阅读开源项目以及我们如何参与开源项目"}],["meta",{"property":"og:description","content":"Git如何帮助我们阅读开源项目以及我们如何参与开源项目 阅读开源代码小技巧——Git历史记录快速翻页式签出 通过阅读源码来学习开源项目是最直接也最有效的方法。而想要了解一个开源项目，最好是从第一个 commit 开始看起，特别是第一个最小可用版本发布前的 commits, 通过阅读对每一次 commit 提交源码，能够最直接的理解作者的设计思路和开发过程中的思考。 在 GitHub 的 repository 页面上可以很方便的看到所有历史记录及其演进。不过，使用 IDE 或有跳转功能的编辑器来阅读会更方便。这就需要我们将代码仓 Clone 到本地。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-02T15:14:24.000Z"}],["meta",{"property":"article:author","content":"JIeJaitt"}],["meta",{"property":"article:tag","content":"红"}],["meta",{"property":"article:tag","content":"大"}],["meta",{"property":"article:tag","content":"圆"}],["meta",{"property":"article:published_time","content":"2022-01-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-02T15:14:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git如何帮助我们阅读开源项目以及我们如何参与开源项目\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-02T15:14:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JIeJaitt\\",\\"url\\":\\"https://jiejaitt.tech\\"}]}"]]},"headers":[{"level":2,"title":"阅读开源代码小技巧——Git历史记录快速翻页式签出","slug":"阅读开源代码小技巧——git历史记录快速翻页式签出","link":"#阅读开源代码小技巧——git历史记录快速翻页式签出","children":[]},{"level":2,"title":"使用 git 阅读开源项目时的小技巧","slug":"使用-git-阅读开源项目时的小技巧","link":"#使用-git-阅读开源项目时的小技巧","children":[]},{"level":2,"title":"为什么要阅读开源项目","slug":"为什么要阅读开源项目","link":"#为什么要阅读开源项目","children":[]},{"level":2,"title":"开源项目难点","slug":"开源项目难点","link":"#开源项目难点","children":[]},{"level":2,"title":"开源项目特点","slug":"开源项目特点","link":"#开源项目特点","children":[]},{"level":2,"title":"使用 git 帮助理解开源项目","slug":"使用-git-帮助理解开源项目","link":"#使用-git-帮助理解开源项目","children":[{"level":3,"title":"逆序查看日志","slug":"逆序查看日志","link":"#逆序查看日志","children":[]},{"level":3,"title":"找一个感兴趣的版本切入","slug":"找一个感兴趣的版本切入","link":"#找一个感兴趣的版本切入","children":[]},{"level":3,"title":"导航与对比","slug":"导航与对比","link":"#导航与对比","children":[]},{"level":3,"title":"追踪文件的变更历史","slug":"追踪文件的变更历史","link":"#追踪文件的变更历史","children":[]},{"level":3,"title":"查找字段","slug":"查找字段","link":"#查找字段","children":[]},{"level":3,"title":"别名","slug":"别名","link":"#别名","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"如何参与开源项目","slug":"如何参与开源项目","link":"#如何参与开源项目","children":[]},{"level":2,"title":"一、概述","slug":"一、概述","link":"#一、概述","children":[]},{"level":2,"title":"二、为什么要参与开源项目","slug":"二、为什么要参与开源项目","link":"#二、为什么要参与开源项目","children":[]},{"level":2,"title":"三、为什么我想介绍如何 PR","slug":"三、为什么我想介绍如何-pr","link":"#三、为什么我想介绍如何-pr","children":[]},{"level":2,"title":"四、我想参与开源项目，怎么开始？","slug":"四、我想参与开源项目-怎么开始","link":"#四、我想参与开源项目-怎么开始","children":[{"level":3,"title":"4.1、寻找一个合适的开源项目","slug":"_4-1、寻找一个合适的开源项目","link":"#_4-1、寻找一个合适的开源项目","children":[]},{"level":3,"title":"4.2、寻找贡献点","slug":"_4-2、寻找贡献点","link":"#_4-2、寻找贡献点","children":[]}]},{"level":2,"title":"五、我要提交 PR，怎么上手？","slug":"五、我要提交-pr-怎么上手","link":"#五、我要提交-pr-怎么上手","children":[{"level":3,"title":"5.1、第一步：Fork 项目仓库","slug":"_5-1、第一步-fork-项目仓库","link":"#_5-1、第一步-fork-项目仓库","children":[]},{"level":3,"title":"5.2、第二步：克隆项目仓库到本地","slug":"_5-2、第二步-克隆项目仓库到本地","link":"#_5-2、第二步-克隆项目仓库到本地","children":[]},{"level":3,"title":"5.3、第三步：更新本地分支代码","slug":"_5-3、第三步-更新本地分支代码","link":"#_5-3、第三步-更新本地分支代码","children":[]},{"level":3,"title":"5.4、第四步：写代码","slug":"_5-4、第四步-写代码","link":"#_5-4、第四步-写代码","children":[]},{"level":3,"title":"5.5、第五步：Commit 和 Push","slug":"_5-5、第五步-commit-和-push","link":"#_5-5、第五步-commit-和-push","children":[]},{"level":3,"title":"5.6、第六步：开一个 PR","slug":"_5-6、第六步-开一个-pr","link":"#_5-6、第六步-开一个-pr","children":[]},{"level":3,"title":"5.7、第七步：PR 合入","slug":"_5-7、第七步-pr-合入","link":"#_5-7、第七步-pr-合入","children":[]}]},{"level":2,"title":"六、我提交了一个 PR，然后遇到了问题 A,B,C,D,E,F,G,...","slug":"六、我提交了一个-pr-然后遇到了问题-a-b-c-d-e-f-g","link":"#六、我提交了一个-pr-然后遇到了问题-a-b-c-d-e-f-g","children":[{"level":3,"title":"6.1、Reviewers 提了一些修改意见，我如何更新 PR？","slug":"_6-1、reviewers-提了一些修改意见-我如何更新-pr","link":"#_6-1、reviewers-提了一些修改意见-我如何更新-pr","children":[]},{"level":3,"title":"6.2、Commits 太多或者记录混乱，如何合并 Commits？","slug":"_6-2、commits-太多或者记录混乱-如何合并-commits","link":"#_6-2、commits-太多或者记录混乱-如何合并-commits","children":[]},{"level":3,"title":"6.2.1、Git 命令行方式合并 Commits","slug":"_6-2-1、git-命令行方式合并-commits","link":"#_6-2-1、git-命令行方式合并-commits","children":[]},{"level":3,"title":"6.2.2 IDE 里合并 Commits","slug":"_6-2-2-ide-里合并-commits","link":"#_6-2-2-ide-里合并-commits","children":[]},{"level":3,"title":"6.3、PR 产生了冲突，如何解决？","slug":"_6-3、pr-产生了冲突-如何解决","link":"#_6-3、pr-产生了冲突-如何解决","children":[]},{"level":3,"title":"6.3.1、在线解决冲突","slug":"_6-3-1、在线解决冲突","link":"#_6-3-1、在线解决冲突","children":[]},{"level":3,"title":"6.3.2、本地解决冲突","slug":"_6-3-2、本地解决冲突","link":"#_6-3-2、本地解决冲突","children":[]},{"level":3,"title":"6.4、CI 检查不过：commit message 相关问题如何修复？","slug":"_6-4、ci-检查不过-commit-message-相关问题如何修复","link":"#_6-4、ci-检查不过-commit-message-相关问题如何修复","children":[]},{"level":3,"title":"6.5、CI 检查不过：DCO(sign) 问题如何修复？","slug":"_6-5、ci-检查不过-dco-sign-问题如何修复","link":"#_6-5、ci-检查不过-dco-sign-问题如何修复","children":[]}]},{"level":2,"title":"最后，如何参与 DevStream 社区？","slug":"最后-如何参与-devstream-社区","link":"#最后-如何参与-devstream-社区","children":[]},{"level":2,"title":"git 工作中使用总结","slug":"git-工作中使用总结","link":"#git-工作中使用总结","children":[]},{"level":2,"title":"git 回滚","slug":"git-回滚","link":"#git-回滚","children":[]},{"level":2,"title":"git clone","slug":"git-clone","link":"#git-clone","children":[]},{"level":2,"title":"git status","slug":"git-status","link":"#git-status","children":[]},{"level":2,"title":"git add .","slug":"git-add","link":"#git-add","children":[]},{"level":2,"title":"git commit","slug":"git-commit","link":"#git-commit","children":[]},{"level":2,"title":"git push","slug":"git-push","link":"#git-push","children":[]},{"level":2,"title":"git pull","slug":"git-pull","link":"#git-pull","children":[]},{"level":2,"title":"git fetch","slug":"git-fetch","link":"#git-fetch","children":[]},{"level":2,"title":"git branch","slug":"git-branch","link":"#git-branch","children":[]},{"level":2,"title":"git checkout dev","slug":"git-checkout-dev","link":"#git-checkout-dev","children":[]},{"level":2,"title":"分支开发步骤, 个人总结","slug":"分支开发步骤-个人总结","link":"#分支开发步骤-个人总结","children":[]}],"git":{"createdTime":1685290859000,"updatedTime":1685718864000,"contributors":[{"name":"JIeJaitt","email":"498938874@qq.com","commits":3}]},"readingTime":{"minutes":34.02,"words":10207},"filePathRelative":"posts/apple/2.md","localizedDate":"2022年1月2日","excerpt":"<h1> Git如何帮助我们阅读开源项目以及我们如何参与开源项目</h1>\\n<h2> 阅读开源代码小技巧——Git历史记录快速翻页式签出</h2>\\n<p>通过阅读源码来学习开源项目是最直接也最有效的方法。而想要了解一个开源项目，最好是从第一个 commit 开始看起，特别是第一个最小可用版本发布前的 commits, 通过阅读对每一次 commit 提交源码，能够最直接的理解作者的设计思路和开发过程中的思考。</p>\\n<p>在 GitHub 的 repository 页面上可以很方便的看到所有历史记录及其演进。不过，使用 IDE 或有跳转功能的编辑器来阅读会更方便。这就需要我们将代码仓 Clone 到本地。</p>","autoDesc":true}');export{e as data};
